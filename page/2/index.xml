<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>42th openheart</title>
    <link>https://www.openheart.icu/</link>
    <description>Recent content on 42th openheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ALL RIGHTS RESERVED KRIS NIE</copyright>
    <lastBuildDate>Sat, 23 Jan 2021 12:14:19 +0000</lastBuildDate>
    
        <atom:link href="https://www.openheart.icu/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>C# in Depth</title>
        <link>https://www.openheart.icu/cs/csharp-in-depth/</link>
        <pubDate>Sat, 25 Jul 2020 00:14:11 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/csharp-in-depth/</guid>
        <description>42th openheart https://www.openheart.icu/cs/csharp-in-depth/ -&lt;p&gt;&lt;em&gt;本文为「C# in Depth」(4th edition)学习记录。&lt;/em&gt;&lt;/p&gt;
- https://www.openheart.icu/cs/csharp-in-depth/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Implementing the Singleton Pattern in C#</title>
        <link>https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/</link>
        <pubDate>Sat, 25 Jul 2020 00:14:11 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/</guid>
        <description>42th openheart https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/ -&lt;h1 id=&#34;implementing-the-singleton-pattern-in-chttpscsharpindepthcomarticlessingleton&#34;&gt;&lt;a href=&#34;https://csharpindepth.com/articles/Singleton&#34;&gt;Implementing the Singleton Pattern in C#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在C＃中实现单例模式。该模式是非常常见的设计模式之一，某个对象全局只需要一个实例时，就可以使用单例模式。它的优点也显而易见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它能够避免对象重复创建，节约空间并提升效率&lt;/li&gt;
&lt;li&gt;避免由于操作不同实例导致的逻辑错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;以下是原文作者Jon Skeet 对C#单例模式的介绍。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;单例模式是软件工程中最著名的模式之一。本质上，单例是仅允许创建其自身的单个实例的类，并且通常提供对该实例的简单访问。最常见的是，单例在创建实例时不允许指定任何参数，否则对实例的第二次请求但参数不同可能会出现问题！ （如果应该为具有相同参数的所有请求访问相同的实例，则使用工厂模式更为合适。）本文仅涉及不需要参数的情况。通常，单例的要求是它们是懒惰地创建的，即：直到首次需要实例时才创建实例。&lt;/p&gt;
&lt;p&gt;在C＃中有多种不同的方式来实现单例模式。我将在这里以从简到难顺序（&lt;em&gt;in reverse order of elegance&lt;/em&gt;）介绍它们，从最常见的线程安全性开始，逐步发展为完全延迟加载，线程安全，简单且高性能的版本。&lt;/p&gt;
&lt;p&gt;所有这些实现都有四个共同的特征，但是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个构造函数，私有且无参数。这样可以防止其他类实例化它（这将违反模式）。请注意，它还防止了子类化（&lt;em&gt;subclassing&lt;/em&gt;）如果一个单例可以被子类化一次，则可以被子类化两次，并且如果每个子类都可以创建一个实例，则将违反（&lt;em&gt;violated&lt;/em&gt;）该模式。如果您需要基本类型的单个实例，则可以使用工厂模式，但是直到运行时才知道确切的类型。&lt;/li&gt;
&lt;li&gt;该类是密封的。严格来说，由于上述几点，这是不必要的，但可以帮助&lt;code&gt;JIT&lt;/code&gt;进行更多优化。&lt;/li&gt;
&lt;li&gt;一个静态变量，其中包含对创建的单个实例的引用（如果有）。&lt;/li&gt;
&lt;li&gt;公共静态方法是获取对创建的单个实例的引用，并在必要时创建一个实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，所有这些实现还使用公共静态属性&lt;code&gt;Instance&lt;/code&gt;作为访问实例的方式。在所有情况下，都可以轻松地将属性转换为方法，而不会影响线程安全性或性能。&lt;/p&gt;
&lt;h2 id=&#34;first-version---not-thread-safe&#34;&gt;First version - not thread-safe&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Bad code! Do not use!
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
      {
        instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
      }
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如前所述，以上内容不是线程安全的。&lt;/p&gt;
&lt;p&gt;两个不同的线程都可以执行判断（&lt;em&gt;evaluated the test&lt;/em&gt;）&lt;code&gt;if(instance == null)&lt;/code&gt;并发现它为&lt;code&gt;true&lt;/code&gt;，然后都创建实例，这违反了单例模式。请注意，实际上可能已经在计算表达式之前创建了实例，但是内存模型不能保证实例的新值能暴露给其他线程，除非已传递适当的内存屏障（互斥锁）（&lt;em&gt;memory barriers&lt;/em&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;second-version---simple-thread-safety&#34;&gt;Second version - simple thread-safety&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; padlock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt;();

  Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;lock&lt;/span&gt; (padlock)
      {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
        {
          instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此实现是线程安全的。线程在共享对象上加锁（&lt;em&gt;takes out a lock&lt;/em&gt;），然后在创建实例之前检查是否已创建实例。这可以解决内存屏障问题（因为锁定可确保所有读取均在获取锁之后逻辑发生，而解锁可确保所有写入均在锁释放之前逻辑发生）并确保只有一个线程将创建一个实例（仅一个线程一次可以位于代码的该部分中，到第二个线程进入该线程时，第一个线程将创建该实例，因此该表达式的计算结果为&lt;code&gt;false&lt;/code&gt;）。不幸的是，每次请求实例时都需要获取锁，因此性能会受到影响。&lt;/p&gt;
&lt;p&gt;请注意，我没有像此实现的某些版本那样锁定&lt;code&gt;typeof(Singleton)&lt;/code&gt;，而是锁定了类私有的静态变量的值。锁定其他类可以访问和锁定的对象（such as the type）可能会导致性能问题甚至死锁。这是我的一般样式首选项-尽可能仅锁定专门为锁定目的而创建的对象，或者为特定目的而将其锁定在哪个文档上（例如用于等待/触发队列）。通常，此类对象应为使用它们的类所专用。这有助于使编写线程安全的应用程序变得更加容易。&lt;/p&gt;
&lt;h2 id=&#34;third-version---attempted-thread-safety-using-double-check-locking&#34;&gt;Third version - attempted thread-safety using double-check locking&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Bad code! Do not use!
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; padlock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt;();

  Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
      {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;lock&lt;/span&gt; (padlock)
        {
          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
          {
            instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
          }
        }
      }
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此实现方式（&lt;em&gt;implementation&lt;/em&gt;）尝试不再每次都加锁，同时保证线程安全。遗憾的是，该模式有四个缺点（&lt;em&gt;there are four downsides to the pattern&lt;/em&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它在Java中不起作用。这么说这似乎有些不合理，但是值得一提的是，您是否需要Java中的单例模式，C＃程序员也很可能是Java程序员。 Java内存模型无法确保在将对新对象的引用分配给实例之前，执行完构造函数。 Java内存模型针对1.5版进行了重新加工，但是在此之后，在没有易失性变量的情况下，双重检查锁定仍然被破坏（像C＃一样）。&lt;/li&gt;
&lt;li&gt;没有任何内存障碍，它在&lt;code&gt;ECMA CLI&lt;/code&gt;规范中也被打破。在.NET 2.0内存模型（比ECMA规范更强）下，它很可能是安全的，但我宁愿不依赖那些更强的语义，尤其是在对安全性有任何疑问的情况下。将实例变量设置为&lt;code&gt;volatile&lt;/code&gt;也有效，就像显式的内存屏障调用一样，但这样的话即使是大佬也无法确切地确定需要哪些屏障。我倾向于不去用大佬们有争议的方法！&lt;/li&gt;
&lt;li&gt;很容易出错。该模式必须与上面的完全一样-任何重大更改都可能影响性能或正确性。&lt;/li&gt;
&lt;li&gt;它的性能仍然不如后来的实现方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fourth-version---not-quite-as-lazy-but-thread-safe-without-using-locks&#34;&gt;Fourth version - not quite as lazy, but thread-safe without using locks&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();

  &lt;span style=&#34;color:#228b22&#34;&gt;// Explicit static constructor to tell C# compiler
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;// not to mark type as beforefieldinit
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如您所见，这确实非常简单，那它是怎么实现线程安全的，它有多懒呢？Well，将C＃中的静态构造函数指定为仅在创建类的实例或引用静态成员时执行，并且每个&lt;code&gt;AppDomain&lt;/code&gt;仅执行一次。鉴于无论其他情况如何都需要执行对新构造的类型的检查，因此比在前面的示例中添加额外的检查要快。&lt;/p&gt;
&lt;p&gt;但是，这种方法也有一些缺点（&lt;em&gt;wrinkles&lt;/em&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它没有其他实现那么懒。特别是，当具有实例以外的静态成员时，对这些成员的首次引用将涉及创建实例。在下一个实现中将对此进行更正。&lt;/li&gt;
&lt;li&gt;如果一个静态构造函数调用另一个而又再次调用第一个静态构造函数，则会带来复杂性。请查阅&lt;code&gt;.NET规范（currently section 9.5.3 of partition II&lt;/code&gt;），以获取有关类型初始值设定项的确切性质的更多详细信息。它们不太可能会影响程序（&lt;em&gt;they&amp;rsquo;re unlikely to bite you&lt;/em&gt;），但值得一提的是，静态构造函数在生命周期内存在互相引用（&lt;em&gt;the consequences of static constructors which refer to each other in a cycle&lt;/em&gt;）。&lt;/li&gt;
&lt;li&gt;只有当类型未使用称为&lt;code&gt;beforefieldinit&lt;/code&gt;的特殊标志进行标记时，.NET才能保证类型初始化程序的惰性。不幸的是，C＃编译器（至少是.NET 1.1运行时中提供的）将所有没有静态构造函数（即看起来像构造函数但被标记为静态的块）的类型都标记为&lt;code&gt;beforefieldinit&lt;/code&gt;。我有一篇&lt;a href=&#34;https://csharpindepth.com/articles/BeforeFieldInit&#34;&gt;文章&lt;/a&gt;，详细介绍了这个问题。还要注意，它会影响性能，如页面底部所述。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种实现方式可以采取的一种捷径：仅使实例成为公共静态只读变量，并完全摆脱该属性。这使得基本框架代码绝对很小！但是，许多人更喜欢拥有属性，以防将来需要采取进一步的措施，并且&lt;code&gt;JIT&lt;/code&gt;内联可能使性能相同。 （请注意，如果您需要惰性，则仍然需要静态构造函数本身。）&lt;/p&gt;
&lt;h2 id=&#34;fifth-version---fully-lazy-instantiation&#34;&gt;Fifth version - fully lazy instantiation&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Nested.instance; }
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Nested&lt;/span&gt;
  {
    &lt;span style=&#34;color:#228b22&#34;&gt;// Explicit static constructor to tell C# compiler
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// not to mark type as beforefieldinit
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Nested()
    {
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里，实例化是由对嵌套类的静态成员的第一次引用触发的，该实例仅在&lt;code&gt;Instance&lt;/code&gt;中发生。这意味着该实现完全是懒的，同事具有先前性能的所有性能优势。请注意，尽管嵌套类可以访问封闭类的私有成员，但事实并非如此，因此这里需要实例化。但是，由于类本身是私有的，所以这不会引起任何其他问题。但是，为了使实例化变得懒惰，代码有些复杂。&lt;/p&gt;
&lt;h2 id=&#34;sixth-version---using-net-4s-lazyt-type&#34;&gt;Sixth version - using .NET 4&amp;rsquo;s &lt;code&gt;Lazy&amp;lt;T&amp;gt;&lt;/code&gt; type&lt;/h2&gt;
&lt;p&gt;如果使用的是.NET 4（或更高版本），则可以使用&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd642331.aspx&#34;&gt;System.Lazy&lt;/a&gt;类型使懒变得非常简单。您需要做的就是将委托传递给构造函数，该构造函数调用Singleton构造函数，使用&lt;code&gt;lambda表达式&lt;/code&gt;最容易完成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; Lazy&amp;lt;Singleton&amp;gt; lazy = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;Singleton&amp;gt; (() =&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton());

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance { 
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; lazy.Value; }
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Singleton()
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它很简单，性能也很好。如果需要，还可以使用&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd642334.aspx&#34;&gt;IsValueCreated&lt;/a&gt;属性检查实例是否已创建。&lt;/p&gt;
&lt;p&gt;上面的代码隐式地使用&lt;code&gt;LazyThreadSafetyMode.ExecutionAndPublication&lt;/code&gt;作为&lt;code&gt;Lazy&amp;lt;Singleton&amp;gt;&lt;/code&gt;的线程安全模式。根据您的要求，您可能希望尝试其他模式。&lt;/p&gt;
&lt;h2 id=&#34;performance-vs-laziness&#34;&gt;Performance vs laziness&lt;/h2&gt;
&lt;p&gt;在许多情况下，您实际上并不需要完全的懒，除非类初始化时需要做特别耗时的事情，或者在其他地方有副作用，否则可以忽略上面有关显式静态构造函数的实现方法。这可以提高性能，因为它允许&lt;code&gt;JIT&lt;/code&gt;编译器进行一次检查（例如，在方法开始时进行检查），以确保类型已初始化，然后从此开始进行假定。如果您的单例实例是在相对紧凑的循环中引用的，则这可能会（相对）产生明显的性能差异。您应该确定是否需要完全延迟的实例化，并在类中适当地记录此决定。&lt;/p&gt;
&lt;p&gt;该页面存在的很多原因是人们试图变得聪明（&lt;em&gt;A lot of the reason for this page&amp;rsquo;s existence is people trying to be clever&lt;/em&gt;），因此提出了双重检查的锁定算法。人们常常认为加锁是付出昂贵代价的操作，这是普遍的并且是错误的。我编写了一个非常快速的基准测试，它以十亿次尝试各种变体，以循环方式获取单例实例。这并不是十分科学（&lt;em&gt;It&amp;rsquo;s not terribly scientific&lt;/em&gt;），因为在现实生活中，您可能想知道，如果每次迭代实际上都涉及到对获取单例的方法的调用等，该过程有多快。但是，它确实显示了重要的意义。在我的笔记本电脑上，最慢的解决方案（约为5倍）是加锁的解决方法（解决方案2）。那重要吗？当您记住它仍然可以在40秒内成功获取十亿次单例时，可能就不会了。 （注意：本文最初是在很早以前写的，我希望现在可以有更好的性能。）这意味着，如果您“仅”每秒获取40万次单例，则获取的成本将不断增加达到1％的性能。因此，改善性能并不会起到太大作用。现在，如果您经常使用单例模式，您是否是在循环中使用它？如果您非常在乎提高性能，为什么不在循环之外声明局部变量，请获取一次单例然后循环。所以，即使是最慢的实现也很容易做到。&lt;/p&gt;
&lt;p&gt;我非常有兴趣看到一个现实世界的应用程序，在该应用程序中，使用简单的加锁和使用较快速的解决方案之一之间的差异实际上带来了显着的性能差异。&lt;/p&gt;
&lt;h2 id=&#34;exceptions&#34;&gt;Exceptions&lt;/h2&gt;
&lt;p&gt;有时，您需要在单例构造函数中进行工作，这可能会引发异常，但对整个应用程序可能不会致命。您的应用程序可能能够解决问题，并希望重试。在这个阶段，使用类型初始值设定项构造单例成为问题。不同的运行时对这种情况的处理方式不同，但是我不知道哪个运行者可以做所需的事情（再次运行类型初始化器），即使这样做，您的代码也会在其他运行时中损坏。为了避免这些问题，我建议使用页面上列出的第二种模式，只需使用一个简单的锁，然后每次都要进行检查，如果尚未成功构建该实例，则可以在方法/属性中进行构建。&lt;/p&gt;
&lt;h2 id=&#34;conclusion-modified-slightly-on-january-7th-2006-updated-feb-12th-2011&#34;&gt;Conclusion (modified slightly on January 7th 2006; updated Feb 12th 2011)&lt;/h2&gt;
&lt;p&gt;在C＃中有多种不同的方式来实现单例模式。读者写信给我，详细介绍了他封装同步方面的一种方式，尽管我承认这在某些非常特殊的情况下（特别是在您想要非常高性能的情况下，并且能够确定单例是否已经被使用的能力）很有用。创建，并且完全懒惰（无论是否调用其他静态成员）。我个人认为这种情况不会经常出现，值得在此页面上进行进一步介绍，但是如果您遇到这种情况，请发&lt;a href=&#34;skeet@pobox.com&#34;&gt;邮件&lt;/a&gt;给我。&lt;/p&gt;
&lt;p&gt;我的个人偏爱是解决方案4：通常，我只有在我需要能够在不触发初始化的情况下调用其他静态方法，或者如果我需要知道单例是否已经被实例化，或者是否需要知道单例是否已被实例化时才不会使用该方法。我不记得我上次遇到这种情况，假设我有过，在这种情况下，我可能会选择解决方案2，该解决方案仍然很不错，而且很容易就可以实现。&lt;/p&gt;
&lt;p&gt;解决方案5很优雅，但比2或4棘手，而且正如我上面所说，它提供的好处似乎很少有用。如果您使用的是.NET 4，则解决方案6是实现懒惰的一种更简单的方法，它还具有明显的惰性。我目前倾向于仅通过习惯就使用解决方案4，但是如果我与经验不足的开发人员一起工作，我很可能会选择解决方案6作为一种简单且普遍适用的模式开始。&lt;/p&gt;
&lt;p&gt;（我不会使用解决方案1，因为它是有缺陷的，我不会使用解决方案3，因为它比不过5。）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;用上述第六种方式实现读取文件的方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Collections.Generic&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.IO&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Text&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Web&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Demo&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyFileReader&lt;/span&gt;
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; Lazy&amp;lt;MyFileReader&amp;gt; lazy = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;MyFileReader&amp;gt;(() =&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; MyFileReader());

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; MyFileReader Instance =&amp;gt; lazy.Value;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; MyFileReader()
        {
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;///  读取json格式文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;param name=&amp;#34;filePath&amp;#34;&amp;gt;eg：\\Demo\\Config.txt&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;param name=&amp;#34;encodType&amp;#34;&amp;gt;默认为 Encoding.Default&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; JsonReader(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; filePath, Encoding encodType)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (encodType == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
            {
                encodType = Encoding.Default;
            }
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; jsonobj = &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;.Empty;

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; (StreamReader sr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StreamReader(System.Web.HttpRuntime.AppDomainAppPath + filePath, encodType))
            {
                &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; line;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; ((line = sr.ReadLine()) != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
                {
                    jsonobj = jsonobj + line.ToString();
                }
            }

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; jsonobj;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; json = fileReader.JsonReader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\\Demo\\Config.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://csharpindepth.com/articles/Singleton&#34;&gt;https://csharpindepth.com/articles/Singleton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/leolion/p/10241822.html&#34;&gt;https://www.cnblogs.com/leolion/p/10241822.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Distributed cache</title>
        <link>https://www.openheart.icu/cs/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</link>
        <pubDate>Fri, 24 Jul 2020 00:00:50 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</guid>
        <description>42th openheart https://www.openheart.icu/cs/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/ -&lt;p&gt;&lt;em&gt;简单了解分布式缓存的各种概念&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;缓存雪崩&#34;&gt;缓存雪崩&lt;/h1&gt;
&lt;p&gt;缓存雪崩我们可以简单的理解为：由于原有&lt;strong&gt;缓存失效&lt;/strong&gt;，新缓存未到期间所有原本应该访问缓存的请求都去查询数据库了，而对数据库 CPU 和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。&lt;/p&gt;
&lt;p&gt;关键词：缓存失效，针对这种情况一般有三种处理办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般并发量不是特别多的时候，使用最多的解决方案是加锁排队。&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;为 key 设置不同的缓存失效时间。&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;第二、第三中方法在面试中均被提到过，很遗憾我只想到了第一种解决办法（纯粹靠蒙），被连续问到两次后觉得分布式缓存需要整体都了解一下，于是去查资料整理了本文&lt;/em&gt; 😁&lt;/p&gt;
&lt;h1 id=&#34;缓存穿透&#34;&gt;缓存穿透&lt;/h1&gt;
&lt;p&gt;缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在 缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。&lt;/p&gt;
&lt;p&gt;有很多种方法可以有效地解决缓存穿透问题，最常见的则是采用布隆过滤器，将所有可能存在的数据哈 希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存 储系统的查询压力。&lt;/p&gt;
&lt;p&gt;另外也有一个更为简单粗暴的方法，如果一个查询返回的数据为空（不管是数据不 存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。 通过这个直接设置的默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问数据库。&lt;/p&gt;
&lt;h1 id=&#34;缓存预热&#34;&gt;缓存预热&lt;/h1&gt;
&lt;p&gt;缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题。用户直接查询事先被预热的缓存数据。&lt;/p&gt;
&lt;h1 id=&#34;缓存更新&#34;&gt;缓存更新&lt;/h1&gt;
&lt;p&gt;缓存更新除了缓存服务器自带的缓存失效策略之外（Redis 默认的有 6 中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种：&lt;/p&gt;
&lt;p&gt;（1）定时去清理过期的缓存；&lt;/p&gt;
&lt;p&gt;（2）当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。&lt;/p&gt;
&lt;h1 id=&#34;缓存降级&#34;&gt;缓存降级&lt;/h1&gt;
&lt;p&gt;当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。 降级的最终目的是保证核心服务可用，即使是有损的。 而且有些服务是无法降级的（如加入购物车、结算）。&lt;/p&gt;
- https://www.openheart.icu/cs/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Reliability&amp;Availability</title>
        <link>https://www.openheart.icu/cs/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E9%AB%98%E5%8F%AF%E9%9D%A0%E6%80%A7/</link>
        <pubDate>Fri, 24 Jul 2020 00:00:50 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E9%AB%98%E5%8F%AF%E9%9D%A0%E6%80%A7/</guid>
        <description>42th openheart https://www.openheart.icu/cs/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E9%AB%98%E5%8F%AF%E9%9D%A0%E6%80%A7/ -&lt;h1 id=&#34;区分高可靠性与高可用性&#34;&gt;区分高可靠性与高可用性&lt;/h1&gt;
&lt;p&gt;Reliability和Availability分别对应可靠性和可用性, 这两个概念既有区别也有联系:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reliability定义为一个服务连续无故障运行的时间，无故障运行的时间越长，可靠性就越高。&lt;/li&gt;
&lt;li&gt;Availiability定义为在足够长的时间里，比如一年的时间里，一个服务可用的时间，服务可用时间越长越好。一般用可服务时间除于总时间算出一个百分比，用百分比作为度量。比如一个服务如果有5个9的可用性，指的就是一年里99.999%时间里服务都是可用的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有两个极端的例子可以很好的说明这两个概念的区别:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假想一个服务，可靠性很高，平均来说可以稳定运行10年，但是一旦服务中断，要用一年的时间来恢复，那么它的可用性只有90%。&lt;/li&gt;
&lt;li&gt;假想另一个服务，可靠性很差，运行10秒就会宕机，但是恢复服务只需要1ms, 那么它的可用性是99.99%&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从这两个极端的例子可以看出，提高可用性有两条路:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一是提高可靠性，当然影响可靠性的原因有很多，包括硬件，软件，网络，运维等。但是有人做过统计，软件的bug是影响可靠性的最主要的因素。并且提高软件质量相较于使用更可靠的硬件也算成本较低的方式了，&lt;/li&gt;
&lt;li&gt;二是减少恢复时间，一旦出现宕机，如果能在秒级恢复，那对业务影响是很小的。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;高可靠性的实现&#34;&gt;高可靠性的实现&lt;/h1&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;高可用性的实现&#34;&gt;高可用性的实现&lt;/h1&gt;
&lt;p&gt;高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。&lt;/p&gt;
&lt;h3 id=&#34;在设计高可用性策略时应该首先考虑下述因素&#34;&gt;在设计高可用性策略时应该首先考虑下述因素&lt;/h3&gt;
&lt;p&gt;​    • RTO（Recovery Time Objective）-也就是恢复时间目标，意味着允许多少宕机时间，通常用几个9表示，比如说99.999%的可用性意味着每年的宕机时间不超过5分钟、99.99%的可用性意味着每年的宕机时间不超过52.5分钟、99.9%的可用性意味着每年的宕机时间不超过8.75小时。值得注意的是，RTO的计算方法要考虑系统是24*365，还是仅仅是上午6点到下午9点等。您还需要注意是否维护窗口的时间在算在宕机时间之内，如果允许在维护窗口时间进行数据库维护和打补丁，则更容易实现更高的可用性。&lt;/p&gt;
&lt;p&gt;​    • RPO（Recovery Point Objective）-也就是恢复点目标，意味着允许多少数据损失。通常只要做好备份，可以比较容易的实现零数据损失。但当灾难发生时，取决于数据库损坏的程度，从备份恢复数据所需要的时间会导致数据库不可用，这会影响RTO的实现。一个早期比较著名的例子是某欧美的银行系统，只考虑的RPO，系统里只存在了完整备份和日志备份，每3个月一次完整备份，每15分钟一次日志备份，当灾难发生时，只能够通过完整备份和日志备份来恢复数据，因此虽然没有数据丢失，但由于恢复数据花了整整两天时间，造成银行系统2天时间不可用，因此流失了大量客户。另外一个相反的例子是国内某在线视频网站，使用SQL Server作为后端关系数据库，前端使用了No-SQL，定期将No-SQL的数据导入关系数据库作为备份，当灾难发生时最多允许丢失一天的数据，但是要保证高可用性。&lt;/p&gt;
&lt;h3 id=&#34;高可用的实现&#34;&gt;高可用的实现&lt;/h3&gt;
&lt;p&gt;整个互联网分层系统架构的高可用，又是通过每一层的&lt;strong&gt;冗余+自动故障转移&lt;/strong&gt;来综合实现的，具体的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;【客户端层】到【反向代理层】的高可用，是通过反向代理层的冗余实现的，常见实践是keepalived + virtual IP自动故障转移&lt;/li&gt;
&lt;li&gt;【反向代理层】到【站点层】的高可用，是通过站点层的冗余实现的，常见实践是nginx与web-server之间的存活性探测与自动故障转移&lt;/li&gt;
&lt;li&gt;【站点层】到【服务层】的高可用，是通过服务层的冗余实现的，常见实践是通过service-connection-pool来保证自动故障转移&lt;/li&gt;
&lt;li&gt;【服务层】到【缓存层】的高可用，是通过缓存数据的冗余实现的，常见实践是缓存客户端双读双写，或者利用缓存集群的主从数据同步与sentinel保活与自动故障转移；更多的业务场景，对缓存没有高可用要求，可以使用缓存服务化来对调用方屏蔽底层复杂性&lt;/li&gt;
&lt;li&gt;【服务层】到【数据库“读”】的高可用，是通过读库的冗余实现的，常见实践是通过db-connection-pool来保证自动故障转移&lt;/li&gt;
&lt;li&gt;【服务层】到【数据库“写”】的高可用，是通过写库的冗余实现的，常见实践是keepalived + virtual IP自动故障转移&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;sqlserver所支持的高可用特性&#34;&gt;SQlServer所支持的高可用特性&lt;/h3&gt;
&lt;p&gt;SQL Server中所支持的高可用性功能与版本息息相关，企业版支持所有的高可用性功能，这些功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;故障转移集群&lt;/li&gt;
&lt;li&gt;数据库镜像（在SQL Server 2012中被标记为“过时”）&lt;/li&gt;
&lt;li&gt;事务日志传送&lt;/li&gt;
&lt;li&gt;数据库快照&lt;/li&gt;
&lt;li&gt;AlwaysOn可用性组&lt;/li&gt;
&lt;li&gt;热加载内存&lt;/li&gt;
&lt;li&gt;在线索引操作&lt;/li&gt;
&lt;li&gt;数据库部分在线（只还原了主文件组或主文件组和额外的NDF文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;故障转移集群&#34;&gt;故障转移集群&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;故障转移集群为整个SQL Server实例提供高可用性支持，这意味着在集群上某个节点的SQL Server实例发生了硬件错误、操作系统错误等会故障转移到该集群上的其它节点。通过多个服务器（节点）共享一个或多个磁盘来实现高可用性，故障转移集群在网络中出现的方式就像单台计算机一样，但是具有高可用特性。值得注意的是，由于故障转移集群是基于共享磁盘，因此会存在磁盘单点故障，因此需要在磁盘层面部署SAN复制等额外的保护措施。常见的故障转移集群是双节点的故障转移集群，包括主主节点和主从节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;事务日志传送&#34;&gt;事务日志传送&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事务日志传送提供了数据库级别的高可用性保护。日志传送可用来维护相应生产数据库（称为“主数据库”）的一个或多个备用数据库（称为“辅助数据库”）。发生故障转移之前，必须通过手动应用全部未还原的日志备份来完全更新辅助数据库。日志传送具有支持多个备用数据库的灵活性。如果需要多个备用数据库，可以单独使用日志传送或将其作为数据库镜像的补充。当这些解决方案一起使用时，当前数据库镜像配置的主体数据库同时也是当前日志传送配置的主数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务日志传送可用于做冷备份和暖备份的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数据库镜像&#34;&gt;数据库镜像&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据库镜像实际上是个软件解决方案，同样提供了数据库级别的保护，可提供几乎是瞬时的故障转移，以提高数据库的可用性。数据库镜像可以用来维护相应生产数据库（称为“主体数据库”）的单个备用数据库（或“镜像数据库”）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为镜像数据库一直处于还原状态，但并不会恢复数据库，因此无法直接访问镜像数据库。但是，为了用于报表等只读的负载，可创建镜像数据库的数据库快照来间接地使用镜像数据库。数据库快照为客户端提供了快照创建时对数据库中数据的只读访问。每个数据库镜像配置都涉及包含主体数据库的“主体服务器”，并且还涉及包含镜像数据库的镜像服务器。镜像服务器不断地使镜像数据库随主体数据库一起更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库镜像在高安全性模式下以同步操作运行，或在高性能模式下以异步操作运行。在高性能模式下，事务不需要等待镜像服务器将日志写入磁盘便可提交，这样可较大程度地提高性能。在高安全性模式下，已提交的事务将由伙伴双方提交，但会延长事务滞后时间。数据库镜像的最简单配置仅涉及主体服务器和镜像服务器。在该配置中，如果主体服务器丢失，则该镜像服务器可以用作备用服务器，但可能会造成数据丢失。高安全性模式支持具有自动故障转移功能的备用配置高安全性模式。这种配置涉及到称为“见证服务器”的第三方服务器实例，它能够使镜像服务器用作热备份服务器。从主体数据库至镜像数据库的故障转移通常要用几秒钟的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库镜像可用于做暖备份和热备份。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;复制&#34;&gt;复制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;复制严格来说并不算是一个为高可用性设计的功能，但的确可以被应用于高可用性。复制提供了数据库对象级别的保护。复制使用的是发布-订阅模式，即由主服务器（称为发布服务器）向一个或多个辅助服务器或订阅服务器发布数据。复制可在这些服务器间提供实时的可用性和可伸缩性。它支持筛选，以便为订阅服务器提供数据子集，同时还支持分区更新。订阅服务器处于联机状态，并且可用于报表或其他功能，而无需进行查询恢复。SQL Server 提供四种复制类型：快照复制、事务复制、对等复制以及合并复制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;alwayson可用性组&#34;&gt;AlwaysOn可用性组&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;AlwaysOn可用性组是SQL Server 2012推出的新功能。同样提供了数据库级别的保护。它取数据库镜像和故障转移集群之长，使得业务上有关联的数据库作为一个可用性组共同故障转移，该功能还拓展了数据库镜像只能1对1的限制，使得1个主副本可以对应最多4个辅助副本（在SQL Server 2014中，该限制被拓展到8个），其中2个辅助副本可以被作为热备份和主副本实时同步，而另外两个异步辅助副本可以作为暖备份。此外，辅助副本还可以被配置为只读，并可用于承担备份的负载。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
- https://www.openheart.icu/cs/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E9%AB%98%E5%8F%AF%E9%9D%A0%E6%80%A7/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>URL</title>
        <link>https://www.openheart.icu/cs/url/</link>
        <pubDate>Wed, 22 Jul 2020 20:28:00 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/url/</guid>
        <description>42th openheart https://www.openheart.icu/cs/url/ -&lt;h1 id=&#34;url解析&#34;&gt;URL解析&lt;/h1&gt;
&lt;h2 id=&#34;urlencode&#34;&gt;UrlEncode&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;符号&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;意义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Encode&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表示空格&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%2B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;(空格)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可以用+号替代&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;分隔目录和子目录&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%2F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;？&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;分隔实际的URL和参数&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%3F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定特殊字符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表示书签&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;URL 中指定的参数间的分隔符&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;URL 中指定参数的值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%3D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ie11url解析问题&#34;&gt;IE11URL解析问题&lt;/h3&gt;
&lt;p&gt;今天(2020-8-3 14:41:03)，发现项目中使用IE11时打开连接出现&lt;code&gt;HTTP400&lt;/code&gt;的问题，有且仅在IE11里面，chrome正常。&lt;/p&gt;
&lt;p&gt;后来查资料发现，是因为我传参的时候带了中文字符，而IE对中文字符是有限制的，所以不成功，而要解决这个问题就需要转码，把要传的中文参数用UrlEncode方法给转一下码就ok。&lt;/p&gt;
- https://www.openheart.icu/cs/url/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Interesting</title>
        <link>https://www.openheart.icu/cs/interesting/</link>
        <pubDate>Wed, 22 Jul 2020 19:45:28 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/interesting/</guid>
        <description>42th openheart https://www.openheart.icu/cs/interesting/ -&lt;h3 id=&#34;texturesjshttpsriccardoscalcoittextures&#34;&gt;&lt;a href=&#34;https://riccardoscalco.it/textures/&#34;&gt;Textures.js&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个 JS 纹理库，基于 D3.js&lt;/p&gt;
&lt;h3 id=&#34;elevatorjshttpsgithubcomtholmanelevatorjs&#34;&gt;&lt;a href=&#34;https://github.com/tholman/elevator.js&#34;&gt;elevator.js&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally, a &amp;ldquo;back to top&amp;rdquo; button that behaves like a real elevator, by adding elevator music to quietly soothe the awkwardness that can ensue when being smoothly scrolled to the top of the screen.&lt;/p&gt;
&lt;p&gt;This is very serious stuff, &lt;a href=&#34;http://tholman.com/elevator.js&#34;&gt;here&amp;rsquo;s a demo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;一个使得“回到顶部”的网页滚动，具有电梯效果的 JS 库。&lt;/p&gt;
&lt;h3 id=&#34;mownedhttpsmownedcom&#34;&gt;&lt;a href=&#34;https://mowned.com/&#34;&gt;Mowned&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个手机数据库&lt;/p&gt;
&lt;h3 id=&#34;javascript-生成艺术图形教程httpsgenerativeartistrycomtutorials&#34;&gt;&lt;a href=&#34;https://generativeartistry.com/tutorials/&#34;&gt;JavaScript 生成艺术图形教程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;介绍 如何使用JavaScript 生成8种艺术图形。&lt;/p&gt;
&lt;h3 id=&#34;使用-raspberry-pi-学习操作系统开发httpss-matyukevichgithubioraspberry-pi-os&#34;&gt;&lt;a href=&#34;https://s-matyukevich.github.io/raspberry-pi-os/&#34;&gt;使用 Raspberry Pi 学习操作系统开发&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这是一个免费英文教程，教大家怎么用树莓派，一步步开发一个简单的操作系统内核，每一步都有实例代码&lt;/p&gt;
&lt;h3 id=&#34;vim-的由来httpspragmaticpineapplecomhow-did-vim-become-so-popular&#34;&gt;&lt;a href=&#34;https://pragmaticpineapple.com/how-did-vim-become-so-popular/&#34;&gt;Vim 的由来&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Vim 有30多年历史，目前依然是最流行的编辑器之一。本文简要地回顾了历史，它的一些主要的设计决定，到底是怎么来的&lt;/p&gt;
&lt;h3 id=&#34;makefile-的静态网站实现httpsmetinnextcorgpoststhe_idea_of_makefile_bloghtml&#34;&gt;&lt;a href=&#34;https://metin.nextc.org/posts/The_Idea_Of_Makefile_Blog.html&#34;&gt;Makefile 的静态网站实现&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现在有各种各样的静态网站工具，比如 Jekyll 和 Hugo 等。作者提出，Makefile 也可以用来实现静态网站，这样就不需要任何外部工具了，只维护一个 Makefile 配置文件即可&lt;/p&gt;
&lt;h3 id=&#34;字体反爬的攻与防httpscjtingme20200701douyu-crawler-and-font-anti-crawling&#34;&gt;&lt;a href=&#34;https://cjting.me/2020/07/01/douyu-crawler-and-font-anti-crawling/&#34;&gt;字体反爬的攻与防&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者因为业务原因需要爬取一批斗鱼主播的相关数据，结果发现斗鱼使用了一种很有意思的反爬技术：字体反爬&lt;/p&gt;
&lt;h3 id=&#34;分页查询不要使用-offset-和-limit-语法httpshackernooncomplease-dont-use-offset-and-limit-for-your-pagination-8ux3u4y&#34;&gt;&lt;a href=&#34;https://hackernoon.com/please-dont-use-offset-and-limit-for-your-pagination-8ux3u4y&#34;&gt;分页查询不要使用 OFFSET 和 LIMIT 语法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;数据查询时，如果数据多，就需要分页，一般使用 OFFSET 和 LIMIT 语法。这篇文章提出，这样做不好，耗费资源，有性能问题&lt;/p&gt;
&lt;h3 id=&#34;git-多行提交信息的简单方法httpswwwstefanjudiscomtoday-i-learnedgit-commit-accepts-several-message-flags-m-to-allow-multiline-commits&#34;&gt;&lt;a href=&#34;https://www.stefanjudis.com/today-i-learned/git-commit-accepts-several-message-flags-m-to-allow-multiline-commits/&#34;&gt;Git 多行提交信息的简单方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt;命令的&lt;code&gt;-m&lt;/code&gt;参数用来指定提交信息，但是这样提交的信息只有一行。本文介绍实现多行信息的简单方法&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git co -m &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;commit title&amp;#34;&lt;/span&gt; -m &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;commit description&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;盲文的由来httpsstitcherioblogbraille-and-the-history-of-software&#34;&gt;&lt;a href=&#34;https://stitcher.io/blog/braille-and-the-history-of-software&#34;&gt;盲文的由来&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如题&lt;/p&gt;
&lt;h3 id=&#34;漫长的雨httpwwwsamwellernetbradbury-120181129the-essential-bradbury&#34;&gt;&lt;a href=&#34;http://www.samweller.net/bradbury-1/2018/11/29/the-essential-bradbury&#34;&gt;漫长的雨&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;《漫长的雨》（The long rain，&lt;strong&gt;&lt;a href=&#34;https://www.sohu.com/a/337866552_771944&#34;&gt;中译全文&lt;/a&gt;&lt;/strong&gt;）是美国科幻小说作家雷·布拉德伯里（Ray Bradbury）1950年发表的一篇短篇小说。&lt;/p&gt;
&lt;p&gt;它讲述四个宇航员因为火箭失事，来到一个不停下雨的星球。这个星球永远在下瓢泼大雨，过去10年一秒都没有停过。宇航员冒着雨水，在丛林里面穿行，拼命寻找前人修建的“阳光穹顶”，那里是一个大屋顶，有温暖的人造阳光，以及充足的食物和休息的场所。&lt;/p&gt;
&lt;p&gt;小说的开头是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;大雨，永远的雨，升腾着汗水和蒸汽的雨。这是密集的瓢泼大雨，像鞭子一样打在眼睛上，飞溅到脚踝上。它是一场淹没其他所有雨水的雨，让人遗忘所有关于雨水的记忆。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6个最常见的网页可访问性问题httpsblogscottlogiccom202007026-most-common-accessibility-problemshtmlempty-links-and-empty-buttons&#34;&gt;&lt;a href=&#34;https://blog.scottlogic.com/2020/07/02/6-most-common-accessibility-problems.html#empty-links-and-empty-buttons&#34;&gt;6个最常见的网页可访问性问题&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可访问性（accessibility）指的是，网页对生理缺陷的用户是否友好。本文总结了6个最常见的可访问性问题及其解决方法&lt;/p&gt;
&lt;h3 id=&#34;伪随机数生成器httpsgithubcombryccodeblobmasterjshashprngsmd&#34;&gt;&lt;a href=&#34;https://github.com/bryc/code/blob/master/jshash/PRNGs.md&#34;&gt;伪随机数生成器&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;伪随机数指的是通过一种算法，由种子值得到的随机数。本文介绍了几种简单的伪随机数算法&lt;/p&gt;
&lt;h3 id=&#34;75行代码入门-webglhttpsavikdascom20200708barebones-webgl-in-75-lines-of-codehtml&#34;&gt;&lt;a href=&#34;https://avikdas.com/2020/07/08/barebones-webgl-in-75-lines-of-code.html&#34;&gt;75行代码入门 WebGL&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebGL 是浏览器对 OpenGL API 的调用接口，可以在浏览器里面实现 3D 动画。本文用一个简短的例子，介绍了这个 API。这只是一篇简介，另有&lt;a href=&#34;https://www.toptal.com/javascript/3d-graphics-a-webgl-tutorial&#34;&gt;完整的 WebGL 教程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;redisearchhttpsossredislabscomredisearch&#34;&gt;&lt;a href=&#34;https://oss.redislabs.com/redisearch/&#34;&gt;RediSearch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以 Redis 作为后端的全文搜索引擎，支持中文&lt;/p&gt;
&lt;h3 id=&#34;onelook-thesaurushttpswwwonelookcomthesaurus&#34;&gt;&lt;a href=&#34;https://www.onelook.com/thesaurus/&#34;&gt;OneLook Thesaurus&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;英语的同义词词典，可以查询同义词，也可以根据描述返回对应的词（比如 &lt;a href=&#34;https://www.onelook.com/thesaurus/?s=large%20birds&amp;amp;loc=revfp&#34;&gt;large bird&lt;/a&gt; 对应哪些词），加载速度很快&lt;/p&gt;
&lt;h3 id=&#34;crdttechhttpscrdttech&#34;&gt;&lt;a href=&#34;https://crdt.tech/&#34;&gt;CRDT.tech&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CRDT 是一种数据结构，用于分布式网络的数据同步，最典型的例子就是多人同时编辑文档。该网站收集了 CRDT 的相关资料&lt;/p&gt;
&lt;h3 id=&#34;progressive-app-storehttpsprogressiveappstorehome&#34;&gt;&lt;a href=&#34;https://progressiveapp.store/home&#34;&gt;Progressive App Store&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个渐进式 App 的在线商店，收集各种 Progessive App，是网友搭建的&lt;/p&gt;
&lt;h3 id=&#34;网页设计博物馆httpswwwwebdesignmuseumorg&#34;&gt;&lt;a href=&#34;https://www.webdesignmuseum.org/&#34;&gt;网页设计博物馆&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该网站收集了1600多个经过精心挑选和分类的网页，展示了1991年至2006年之间的网站设计趋势&lt;/p&gt;
&lt;h3 id=&#34;窗口交换httpswindow-swapcom&#34;&gt;&lt;a href=&#34;https://window-swap.com/&#34;&gt;窗口交换&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该网站让世界各地的人上传他们窗外的镜像，一段5到10分钟的视频。其他用户就可以在网站上随机看到别人的窗外&lt;/p&gt;
&lt;h3 id=&#34;cnetcomhttpswwwcnetcompicturesinside-the-kansas-survival-condo-designed-to-save-you-from-nuclear-winter&#34;&gt;&lt;a href=&#34;https://www.cnet.com/pictures/inside-the-kansas-survival-condo-designed-to-save-you-from-nuclear-winter/&#34;&gt;cnet.com&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;幸存者公寓&lt;/p&gt;
&lt;h3 id=&#34;平流层飞船httpswwwgeekwirecom2020space-perspective-reboots-vision-flying-passengers-stratosphere-balloon&#34;&gt;&lt;a href=&#34;https://www.geekwire.com/2020/space-perspective-reboots-vision-flying-passengers-stratosphere-balloon/&#34;&gt;平流层飞船&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;美国一家私人公司提出了“平流层飞船”计划，让游客乘坐飞船上升到平流层（距离地面30公里），体验一下太空的感觉，票价预计为每人12.5万美元。飞船可以乘坐八名乘客和一名飞行员，先进行长达两个小时的上升，然后在空中停留两个小时，最后再花两个小时下降。&lt;/p&gt;
&lt;p&gt;飞船的上升动力，主要来自一个巨大的充满氢气的气球。飞船内部有酒吧，还有一个“拥有世界上最佳视野”的厕所，甚至有 Wifi。该公司计划飞船在2024年完工，目前已经在&lt;a href=&#34;https://thespaceperspective.com/fly/&#34;&gt;官网&lt;/a&gt;接受预订。&lt;/p&gt;
&lt;h3 id=&#34;sha-256-的原理httpsqvaultio20200708how-sha-2-works-step-by-step-sha-256&#34;&gt;&lt;a href=&#34;https://qvault.io/2020/07/08/how-sha-2-works-step-by-step-sha-256/&#34;&gt;SHA-256 的原理&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文通过一个简单的例子，一步步演示 SHA-256 算法，如何将字符串变成一个256位的哈希值。&lt;/p&gt;
&lt;h3 id=&#34;javascript-函数作用域解释httpsbloggreenrootsinfojavascript-scope-fundamentals-with-tom-and-jerry-ckcq723h4007vkxs18dxa97ae&#34;&gt;&lt;a href=&#34;https://blog.greenroots.info/javascript-scope-fundamentals-with-tom-and-jerry-ckcq723h4007vkxs18dxa97ae&#34;&gt;JavaScript 函数作用域解释&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通过一个简单的例子，解释 JavaScript 的函数作用域规则&lt;/p&gt;
&lt;h3 id=&#34;gpt-3-模型的图灵测试httplackerioai20200706giving-gpt-3-a-turing-testhtml&#34;&gt;&lt;a href=&#34;http://lacker.io/ai/2020/07/06/giving-gpt-3-a-turing-test.html&#34;&gt;GPT-3 模型的图灵测试&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;GPT-3 是 OpenAI 公司开发的一个 AI 模型，能够自动生成文本。作者对它进行了图灵测试，跟它对话，看能不能分辨出对方是一个软件。&lt;/p&gt;
&lt;h3 id=&#34;pastemecnhttpspastemecn&#34;&gt;&lt;a href=&#34;https://pasteme.cn/&#34;&gt;PasteMe.cn&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个文本分享网站，不需要注册，会对输入的文本或代码生成 URL，支持密码和阅后即焚&lt;/p&gt;
&lt;h3 id=&#34;shoelacehttpsshoelacestyle&#34;&gt;&lt;a href=&#34;https://shoelace.style/&#34;&gt;Shoelace&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个 Web Components 组件库，易用&lt;/p&gt;
&lt;h3 id=&#34;3d-封面生成器https3d-book-cssnetlifyapp&#34;&gt;&lt;a href=&#34;https://3d-book-css.netlify.app/&#34;&gt;3D 封面生成器&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在线工具，让一张平面图片变成 3D 书籍封面。&lt;/p&gt;
&lt;h3 id=&#34;easy-monitorhttpsgithubcomhyj1991easy-monitor&#34;&gt;&lt;a href=&#34;https://github.com/hyj1991/easy-monitor&#34;&gt;easy-monitor&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Node.js 应用的性能监控工具，可以定位线上故障。代码开源，支持私有部署&lt;/p&gt;
&lt;h3 id=&#34;remark42httpsgithubcomumputunremark42&#34;&gt;&lt;a href=&#34;https://github.com/umputun/remark42&#34;&gt;remark42&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;开源的评论服务，可以用来为静态网页加上留言功能。&lt;/p&gt;
&lt;h3 id=&#34;wikijshttpswikijsorg&#34;&gt;&lt;a href=&#34;https://wiki.js.org/&#34;&gt;Wiki.js&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;架设个人 Wiki 的 Node.js 应用。&lt;/p&gt;
&lt;h3 id=&#34;rust-语言之旅httpstourofrustcom00_zh-cnhtml&#34;&gt;&lt;a href=&#34;https://tourofrust.com/00_zh-cn.html&#34;&gt;Rust 语言之旅&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Rust 语言的中文版在线教程，通过可以运行的小例子介绍语法，从 Hello World 开始讲起&lt;/p&gt;
&lt;h3 id=&#34;木星相册httpswwwflickrcomphotoskevinmgillalbums72157709069900506&#34;&gt;&lt;a href=&#34;https://www.flickr.com/photos/kevinmgill/albums/72157709069900506&#34;&gt;木星相册&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个天文爱好者收集的木星照片。&lt;/p&gt;
&lt;h3 id=&#34;麻省理工学院的统计学课件httpsocwmiteducoursesmathematics18-650-statistics-for-applications-fall-2016lecture-slides&#34;&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/mathematics/18-650-statistics-for-applications-fall-2016/lecture-slides/&#34;&gt;麻省理工学院的统计学课件&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;麻省理工学院本科生统计学课程的 PPT 课件&lt;/p&gt;
&lt;h3 id=&#34;没有博士学位者的-tensorflow-和深度学习教程httpscodelabsdevelopersgooglecomcodelabscloud-tensorflow-mnist&#34;&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/cloud-tensorflow-mnist/&#34;&gt;没有博士学位者的 TensorFlow 和深度学习教程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;谷歌发布的英文教程，没有高深的数学，向初学者介绍 TensorFlow 和深度学习。&lt;/p&gt;
&lt;h3 id=&#34;javascript-的第三纪元httpswwwswyxiowritingjs-third-age&#34;&gt;&lt;a href=&#34;https://www.swyx.io/writing/js-third-age/&#34;&gt;JavaScript 的第三纪元&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者认为，JavaScript 的发展可以分成三个阶段：原始阶段、Node.js 阶段和目前的超越阶段。&lt;/p&gt;
&lt;p&gt;当前阶段的主要特征是，JavaScript 开始作为底层技术，ES6 模块、TypeScript、WebAssembly 逐渐普及&lt;/p&gt;
&lt;h3 id=&#34;如何构建优秀的-apihttpswwwstxnextcombloghow-to-build-a-good-api-that-wont-embarrass-you&#34;&gt;&lt;a href=&#34;https://www.stxnext.com/blog/how-to-build-a-good-api-that-wont-embarrass-you&#34;&gt;如何构建优秀的 API&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍设计一个优秀的 RESTful API 的注意事项，以及 REST 和 GraphQL 两种 API 的差异&lt;/p&gt;
&lt;h3 id=&#34;python-的-sqlite-数据库教程httpstowardsdatasciencecomdo-you-know-python-has-a-built-in-database-d553989c87bd&#34;&gt;&lt;a href=&#34;https://towardsdatascience.com/do-you-know-python-has-a-built-in-database-d553989c87bd&#34;&gt;Python 的 SQLite 数据库教程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文是入门教程，介绍如何在 Python 语言使用内置的 SQLite 数据库，不需要任何安装步骤&lt;/p&gt;
&lt;h3 id=&#34;10个有用的-git-log-技巧httpshackernooncomten-useful-git-log-tricks-7nt3yxy&#34;&gt;&lt;a href=&#34;https://hackernoon.com/ten-useful-git-log-tricks-7nt3yxy&#34;&gt;10个有用的 git log 技巧&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍&lt;code&gt;git log&lt;/code&gt;命令的10个参数用法&lt;/p&gt;
&lt;h3 id=&#34;async-函数的一个注意点httpswwwbrandonsmithninjablogasync-await&#34;&gt;&lt;a href=&#34;https://www.brandonsmith.ninja/blog/async-await&#34;&gt;async 函数的一个注意点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文提醒大家注意，使用 JavaScript 的 async/await 函数时，要区分并发操作和继发操作&lt;/p&gt;
&lt;h3 id=&#34;react-spectrumhttpsreact-spectrumadobecomreact-spectrumindexhtml&#34;&gt;&lt;a href=&#34;https://react-spectrum.adobe.com/react-spectrum/index.html&#34;&gt;React Spectrum&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Adobe 公司的 React 组件库&lt;/p&gt;
&lt;h3 id=&#34;css-sweeperhttpsgithubcompropjockeycss-sweeper&#34;&gt;&lt;a href=&#34;https://github.com/propjockey/css-sweeper&#34;&gt;css-sweeper&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个只用 HTML 和 CSS 实现的扫雷游戏，不使用 JavaScript&lt;/p&gt;
&lt;h3 id=&#34;react-tablehttpsgithubcomtannerlinsleyreact-table&#34;&gt;&lt;a href=&#34;https://github.com/tannerlinsley/react-table&#34;&gt;react-table&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;React 的表格组件库，新的 7.0 版完全采用 Hooks 设计&lt;/p&gt;
&lt;h3 id=&#34;数据可视化图表目录httpsdatavizcataloguecomzh&#34;&gt;&lt;a href=&#34;https://datavizcatalogue.com/ZH/&#34;&gt;数据可视化图表目录&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个网站收集各种数据可视化的图表类型，简要讲解每种类型的用途和特点&lt;/p&gt;
&lt;h3 id=&#34;拥抱扩展扑灭httpsenwikipediaorgwikiembrace_extend_and_extinguish&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish&#34;&gt;拥抱，扩展，扑灭&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1996年，美国司法部发现，微软公司内部使用“拥抱，扩展，扑灭”（Embrace, extend, and extinguish，简称 EEE ）这个短语，描述对付竞争对手的策略。&lt;/p&gt;
&lt;p&gt;首先，拥抱对方的产品种类，进入对方的市场；然后，使用自己的专有功能扩展产品标准；最后，利用这些差异，使竞争对手处于不利地位。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;拥抱阶段&lt;/strong&gt; ：开发与竞争产品基本兼容的软件，或实施公共标准。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展阶段&lt;/strong&gt;：添加和推广竞争对手或标准不支持的功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扑灭阶段&lt;/strong&gt;：由于市场份额的扩展，添加的功能成为事实上的标准时，再将竞争对手边缘化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微软的 IE 浏览器就是使用这种策略的最好例子。&lt;/p&gt;
&lt;p&gt;现在有人认为，微软对于开源软件的态度，从敌对变成拥抱，也有可能是在实施这种策略。另一方面，谷歌公司在很多技术领域的作为，也让人疑虑，它在实施这种策略。&lt;/p&gt;
&lt;h3 id=&#34;javascript-语言的多态httpszellwkcomblogpolymorphism-javascript&#34;&gt;&lt;a href=&#34;https://zellwk.com/blog/polymorphism-javascript/&#34;&gt;JavaScript 语言的多态&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;多态（Polymorph）是面向对象编程的一个术语，有多种含义。本文讨论 JavaScript 语言如何实现多态&lt;/p&gt;
&lt;h3 id=&#34;github-actions-的-go-语言示例httpswwwfreecodecamporgnewsgo-automate-your-github-profile-readme&#34;&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/go-automate-your-github-profile-readme/&#34;&gt;GitHub Actions 的 Go 语言示例&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍如何在 GitHub 仓库里面定时跑 Go 语言脚本，再将代码推送回仓库&lt;/p&gt;
&lt;h3 id=&#34;javascript-测试框架比较httpsgithubcomscraggocomparing-javascript-test-runnersblobmasterreadmemd&#34;&gt;&lt;a href=&#34;https://github.com/scraggo/comparing-javascript-test-runners/blob/master/README.md&#34;&gt;JavaScript 测试框架比较&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Mocha、Ava、Jest 是目前非常流行的三大 JavaScript 测试框架，本文对它们进行了比较，每个框架最合适的运行场景&lt;/p&gt;
&lt;h3 id=&#34;git-工作流程的图示httpszepelioblog5-git-workflows-to-improve-development&#34;&gt;&lt;a href=&#34;https://zepel.io/blog/5-git-workflows-to-improve-development/&#34;&gt;Git 工作流程的图示&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文用清晰的图形解释了五种 Git 工作流程&lt;/p&gt;
&lt;h3 id=&#34;tailwind-css从业余项目到数百万美元的业务httpsadamwathanmetailwindcss-from-side-project-byproduct-to-multi-mullion-dollar-business&#34;&gt;&lt;a href=&#34;https://adamwathan.me/tailwindcss-from-side-project-byproduct-to-multi-mullion-dollar-business/&#34;&gt;Tailwind CSS：从业余项目到数百万美元的业务&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Tailwind CSS 的作者介绍这个框架的诞生过程，以及他们如何通过它赚到几百万美元。&lt;/p&gt;
&lt;h3 id=&#34;windows-10-阻止修改-hosts-文件httpswwwbleepingcomputercomnewsmicrosoftwindows-10-hosts-file-blocking-telemetry-is-now-flagged-as-a-risk&#34;&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/microsoft/windows-10-hosts-file-blocking-telemetry-is-now-flagged-as-a-risk/&#34;&gt;Windows 10 阻止修改 HOSTS 文件&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;HOSTS 文件用于修改网站域名对应的 IP 地址，WIndows 10 内置的 Windows Defender 软件最近开始警告和阻止修改这个文件。&lt;/p&gt;
&lt;h3 id=&#34;我用-gpt-3-写了一篇博客文章httpsliampsubstackcompmy-gpt-3-blog-got-26-thousand-visitors&#34;&gt;&lt;a href=&#34;https://liamp.substack.com/p/my-gpt-3-blog-got-26-thousand-visitors&#34;&gt;我用 GPT-3 写了一篇博客文章&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;GPT-3 是目前最先进的人工智能模型，可以根据输入，返回一篇人类可读的文章。&lt;/p&gt;
&lt;p&gt;作者输入文章的标题和简介，GPT-3 就自动返回了一篇博客文章，这篇文章还登上了 Hacker News 的第一名，许多人都没有发现这是计算机写的。&lt;/p&gt;
&lt;h3 id=&#34;随机数据生成器httpsrandom-data-apicom&#34;&gt;&lt;a href=&#34;https://random-data-api.com/&#34;&gt;随机数据生成器&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个网站提供一个 API，可以让你定制想要的随机数据，以 JSON 格式返回。&lt;/p&gt;
&lt;h3 id=&#34;compiler-explorerhttpsgodboltorg&#34;&gt;&lt;a href=&#34;https://godbolt.org/&#34;&gt;Compiler Explorer&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个在线的编译器学习工具，可以显示高级语言对应的汇编代码，支持多种语言。&lt;/p&gt;
&lt;h3 id=&#34;yandex-图片搜索httpsyandexcomimages&#34;&gt;&lt;a href=&#34;https://yandex.com/images/&#34;&gt;Yandex 图片搜索&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;俄罗斯的搜索引擎 Yandex&lt;/p&gt;
&lt;h3 id=&#34;nightcafehttpscreatornightcafestudio&#34;&gt;&lt;a href=&#34;https://creator.nightcafe.studio/&#34;&gt;NightCafe&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个图片处理的在线工具，可以让普通照片变成世界名画&lt;/p&gt;
&lt;h3 id=&#34;js-1024-竞赛httpsjs1024funresults2020&#34;&gt;&lt;a href=&#34;https://js1024.fun/results/2020&#34;&gt;JS 1024 竞赛&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这是代码长度不超过1024字节的 JS 程序的比赛，2020年的结果已经公布了。第一名是一个&lt;a href=&#34;https://js1024.fun/demos/2020/16&#34;&gt;钢琴键盘&lt;/a&gt;，第二名和第三名是动画渲染，第四名是一个游戏。&lt;/p&gt;
&lt;h3 id=&#34;stackoverflow-top-cpphttpsgithubcomethsonliustackoverflow-top-cpptreemasterquestion&#34;&gt;&lt;a href=&#34;https://github.com/EthsonLiu/stackoverflow-top-cpp/tree/master/question&#34;&gt;stackoverflow-top-cpp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;StackOverflow 上面高票排名的 C/C++ 问题的中文翻译&lt;/p&gt;
&lt;h3 id=&#34;gitenberghttpswwwgitenbergorg&#34;&gt;&lt;a href=&#34;https://www.gitenberg.org/&#34;&gt;Gitenberg&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个公共领域的英文电子书的搜索引擎。&lt;/p&gt;
&lt;h3 id=&#34;svg-repohttpswwwsvgrepocom&#34;&gt;&lt;a href=&#34;https://www.svgrepo.com/&#34;&gt;SVG Repo&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个 SVG 图片（主要是图标）的搜索引擎。&lt;/p&gt;
&lt;h3 id=&#34;motherboard-dbhttpsmotherboarddbcom&#34;&gt;&lt;a href=&#34;https://motherboarddb.com/&#34;&gt;Motherboard DB&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;电脑主板的数据库&lt;/p&gt;
&lt;h3 id=&#34;kindle-的诞生httpsthreadreaderappcomthread1287944667414196225html&#34;&gt;&lt;a href=&#34;https://threadreaderapp.com/thread/1287944667414196225.html&#34;&gt;Kindle 的诞生&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如题&lt;/p&gt;
&lt;h3 id=&#34;我参加-pixar-2020-渲染大赛的作品httpsblogyiningkarllicom202007shipshape-renderman-challengehtml&#34;&gt;&lt;a href=&#34;https://blog.yiningkarlli.com/2020/07/shipshape-renderman-challenge.html&#34;&gt;我参加 Pixar 2020 渲染大赛的作品&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pixar 动画公司每年举办一个比赛，提供一些数字模型，邀请全世界爱好者对它们进行渲染着色，评选出优胜者。作者介绍了他如何创作第一名作品&lt;/p&gt;
&lt;h3 id=&#34;如何自己实现一个全文搜索引擎httpsartemkrylysovcomblog20200728lets-build-a-full-text-search-engine&#34;&gt;&lt;a href=&#34;https://artem.krylysov.com/blog/2020/07/28/lets-build-a-full-text-search-engine/&#34;&gt;如何自己实现一个全文搜索引擎&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者通过一个简单的例子，讲解全文搜索引擎的原理，自己如何实现倒排索引。举例用的是 Go 语言，代码很简单，接近伪代码&lt;/p&gt;
&lt;h3 id=&#34;如何发布-deno-模块httpsdevtocraigmortenhow-to-publish-deno-modules-2cg6&#34;&gt;&lt;a href=&#34;https://dev.to/craigmorten/how-to-publish-deno-modules-2cg6&#34;&gt;如何发布 Deno 模块&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Deno 是一个 TypeScript 运行时，可以替代 Node.js。它有一个模块托管服务，本文介绍如果将 GitHub 上面的模块源码，通过 Webhook 发布到官方的托管服务。&lt;/p&gt;
&lt;h3 id=&#34;财政部为什么使用-arctan-函数调节工资总额httpsmpweixinqqcomsig_ftmp6xbbse7q-xr70fa&#34;&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ig_FTMp6XbbSE7q-XR70fA&#34;&gt;财政部为什么使用 arctan 函数调节工资总额&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;财政部最近下发了一个文件，使用 arctan 函数调节国有金融企业的工资总额。这个函数到底有什么特别之处？&lt;/p&gt;
&lt;h3 id=&#34;2020年值得推荐的13本-java-书籍httpsmediumcomjavarevisited10-books-java-developers-should-read-in-2020-e6222f25cc72&#34;&gt;&lt;a href=&#34;https://medium.com/javarevisited/10-books-java-developers-should-read-in-2020-e6222f25cc72&#34;&gt;2020年值得推荐的13本 Java 书籍&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者列了一个书单，推荐了13本 Java 学习书籍。&lt;/p&gt;
&lt;p&gt;2020-8-14&lt;/p&gt;
&lt;h3 id=&#34;如何在谷歌查找到任何信息httpswwwalecfyidorking-how-to-find-anything-on-the-internethtml&#34;&gt;&lt;a href=&#34;https://www.alec.fyi/dorking-how-to-find-anything-on-the-internet.html&#34;&gt;如何在谷歌查找到任何信息&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文通过一些小例子，介绍谷歌的搜索语法。这里还有完整的&lt;a href=&#34;https://ahrefs.com/blog/google-advanced-search-operators/&#34;&gt;搜索命令列表&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;张汝京谈中国半导体产业的发展httpswwwtmtpostcom4616621html&#34;&gt;&lt;a href=&#34;https://www.tmtpost.com/4616621.html&#34;&gt;张汝京谈中国半导体产业的发展&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;张汝京是中芯国际创始人，他在最近一次演讲中，回顾了第一到第三代半导体的发展，以及谈了中国半导体产业如何实现“超车”、第三代半导体未来的发展模式是什么等问题。&lt;/p&gt;
&lt;h3 id=&#34;停电时冰箱会保持低温多长时间httpswoodgearscaheatingfreezerhtml&#34;&gt;&lt;a href=&#34;https://woodgears.ca/heating/freezer.html&#34;&gt;停电时，冰箱会保持低温多长时间？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者做了一个有趣的实验，在冰箱里面放入传感器和树莓派，看看停电后，冷冻室能保持低温多长时间。结果发现，室温19°C的房间中，冷冻室每小时损失的冷度为2.6％，大约26小时后温度将达到0°。&lt;/p&gt;
&lt;h3 id=&#34;fasthttpsfastdesigndocsintroduction&#34;&gt;&lt;a href=&#34;https://fast.design/docs/introduction&#34;&gt;Fast&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;微软官方的 Web Components 组件库。&lt;/p&gt;
&lt;h3 id=&#34;p2httpswordpresscomp2&#34;&gt;&lt;a href=&#34;https://wordpress.com/p2/&#34;&gt;P2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WordPress 团队新发布的团队协作工具，有点类似公司内部的博客系统，可以免费使用，计划会在未来开源。&lt;/p&gt;
&lt;h3 id=&#34;hasura-graphql-引擎httpsgithubcomhasuragraphql-engineblobmastertranslationsreadmechinesemd&#34;&gt;&lt;a href=&#34;https://github.com/hasura/graphql-engine/blob/master/translations/README.chinese.md&#34;&gt;Hasura GraphQL 引擎&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个高性能的 GraphQL 服务器，提供 Postgres上开箱即用的实时GraphQL API&lt;/p&gt;
&lt;h3 id=&#34;codotahttpswwwcodotacom&#34;&gt;&lt;a href=&#34;https://www.codota.com/&#34;&gt;codota&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个人工智能的代码提示和补全插件，支持各大主要的 IDE。&lt;/p&gt;
&lt;h3 id=&#34;github-readme-statshttpsgithubcomanuraghazragithub-readme-statsblobmasterdocsreadme_cnmd&#34;&gt;&lt;a href=&#34;https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md&#34;&gt;github-readme-stats&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个可以自己部署的服务，生成个人 GitHub 账户的统计，可以插在自述文件里面。这里还有另一个&lt;a href=&#34;https://github.com/athul/waka-readme&#34;&gt;类似的服务&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;danfojshttpsgithubcomopensource9jadanfojs&#34;&gt;&lt;a href=&#34;https://github.com/opensource9ja/danfojs&#34;&gt;Danfo.js&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个提供跟 Pandas 相同功能的 JS 数学计算库。&lt;/p&gt;
&lt;h3 id=&#34;meilisearchhttpsgithubcommeilisearchmeilisearch&#34;&gt;&lt;a href=&#34;https://github.com/meilisearch/MeiliSearch&#34;&gt;MeiliSearch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个开源的全文搜索软件，可以自己搭建服务，支持汉语搜索。&lt;/p&gt;
&lt;h3 id=&#34;mvpcsshttpsandybrewergithubiomvp&#34;&gt;&lt;a href=&#34;https://andybrewer.github.io/mvp/&#34;&gt;mvp.css&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个最简化的 CSS 库，不提供任何自定义的类，只给出最基本的 HTML 元素的样式，适合在它的基础上添加自定义的样式。&lt;/p&gt;
&lt;h3 id=&#34;技术树httpsgithubcomgithubarchive-programblobmasterthetechtreemd&#34;&gt;&lt;a href=&#34;https://github.com/github/archive-program/blob/master/TheTechTree.md&#34;&gt;技术树&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为了让后代了解我们如何开发和使用软件，GitHub 官方开出了一个书单，称为“技术树”（the Tech Tree），包括16个大类的200多本经典书籍。这些书籍的数字化版本，将存放在 GitHub 的北极仓库。&lt;/p&gt;
&lt;h3 id=&#34;sql-实例教程httpswwwsqlteachingcom&#34;&gt;&lt;a href=&#34;https://www.sqlteaching.com/&#34;&gt;SQL 实例教程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个针对初学者的 SQL 简单教程，通过在网页上运行示例来学习 SQL&lt;/p&gt;
&lt;h3 id=&#34;如何管理-redis-数据库httpswwwdigitaloceancomcommunitybookshow-to-manage-a-redis-database-ebook&#34;&gt;&lt;a href=&#34;https://www.digitalocean.com/community/books/how-to-manage-a-redis-database-ebook&#34;&gt;如何管理 Redis 数据库&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;DigitalOcean 发布的免费英文电子书，向初学者介绍什么是 Redis 和它的基本用法。&lt;/p&gt;
&lt;h3 id=&#34;bui-app-开发教程httpsmpweixinqqcommpappmsgalbum__bizmziynjqxnjuwmgactiongetalbumalbum_id1338511290868006913subscene159subscene158scenenotehttpsmpweixinqqcoms__bizmziynjqxnjuwmgmid2247483675idx1snfc494fc7e05dd5d05c2049e04816190dchksme8718302df060a14dc64d5ffddc76c319fd7cbfc8f7ac9c2ca09975a5431f23e85309cdb1820scene158rdwechat_redirect&#34;&gt;&lt;a href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNjQxNjUwMg==&amp;amp;action=getalbum&amp;amp;album_id=1338511290868006913&amp;amp;subscene=159&amp;amp;subscene=158&amp;amp;scenenote=https://mp.weixin.qq.com/s?__biz=MzIyNjQxNjUwMg==&amp;amp;mid=2247483675&amp;amp;idx=1&amp;amp;sn=fc494fc7e05dd5d05c2049e04816190d&amp;amp;chksm=e8718302df060a14dc64d5ffddc76c319fd7cbfc8f7ac9c2ca09975a5431f23e85309cdb1820&amp;amp;scene=158#rd#wechat_redirect&#34;&gt;BUI App 开发教程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;BUI 是一个国产的移动端 H5 框架，这是框架作者写的系列教程，演示如何用 BUI 开发一个网易新闻 App。&lt;/p&gt;
&lt;h3 id=&#34;鞋带暗语httpswwwfieggencomshoelacecialacinghtm&#34;&gt;&lt;a href=&#34;https://www.fieggen.com/shoelace/cialacing.htm&#34;&gt;鞋带暗语&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;冷战时期，中央情报局曾经采用一种鞋带暗语。只要根据鞋面上，鞋带交叉的位置和次数，就能传递事先约定的信息。这种方法非常简单，不受环境约束，外人很难察觉。&lt;/p&gt;
&lt;h3 id=&#34;css-生成艺术httpsgenerative-art-with-csscommonshost&#34;&gt;&lt;a href=&#34;https://generative-art-with-css.commons.host/&#34;&gt;CSS 生成艺术&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如何用 CSS 生成各种形状的图形&lt;/p&gt;
&lt;h3 id=&#34;manjaro-与-arch-linux-的区别httpsitsfosscommanjaro-vs-arch-linux&#34;&gt;&lt;a href=&#34;https://itsfoss.com/manjaro-vs-arch-linux/&#34;&gt;Manjaro 与 Arch Linux 的区别&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Manjaro 与 Arch 都是流行的 Linux 发行版，Manjaro 基于 Arch，但是有自己显著的特点。&lt;/p&gt;
&lt;h3 id=&#34;单个创始人的表现更好httpswwwgrowthclubonlinepostresearch-says-solo-founders-perform-better-here-is-why&#34;&gt;&lt;a href=&#34;https://www.growthclub.online/post/research-says-solo-founders-perform-better-here-is-why&#34;&gt;单个创始人的表现更好&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;统计显示，单个创始人的公司更可能盈利，本文分析原因&lt;/p&gt;
&lt;h3 id=&#34;熵的羊群解释httpsaatishbcomentropy&#34;&gt;&lt;a href=&#34;https://aatishb.com/entropy/&#34;&gt;熵的羊群解释&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;较为通俗地解释了，物理学的熵（entropy）是概率导致的。&lt;/p&gt;
&lt;h3 id=&#34;crdt-算法是否适合多人实时编辑httpsblogkevinjahnsdeare-crdts-suitable-for-shared-editing&#34;&gt;&lt;a href=&#34;https://blog.kevinjahns.de/are-crdts-suitable-for-shared-editing/&#34;&gt;CRDT 算法是否适合多人实时编辑？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CRDT 算法用于分布式服务实现数据同步，比如同一篇文档的多人实时编辑。&lt;a href=&#34;https://github.com/yjs/yjs&#34;&gt;Yjs&lt;/a&gt; 是 CRDT 的一个实现，本文是它的作者对这个算法的解释，内容有一定深度。&lt;/p&gt;
&lt;h3 id=&#34;typescript-简明介绍httpswwwwarambilcomtypescript-why-is-so-important&#34;&gt;&lt;a href=&#34;https://www.warambil.com/typescript-why-is-so-important&#34;&gt;TypeScript 简明介绍&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;针对初学者的 TypeScript 介绍&lt;/p&gt;
&lt;h3 id=&#34;html-smuggling-解释httpsoutflanknlblog20180814html-smuggling-explained&#34;&gt;&lt;a href=&#34;https://outflank.nl/blog/2018/08/14/html-smuggling-explained/&#34;&gt;HTML smuggling 解释&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;很多人不知道，JavaScript 可以脚本生成 exe 文件，让用户下载。本文介绍如何在网页里面嵌入一个恶意的可执行文件。&lt;/p&gt;
&lt;h3 id=&#34;广告短信的退订内幕httpsdailyzhihucomstory9726870&#34;&gt;&lt;a href=&#34;https://daily.zhihu.com/story/9726870&#34;&gt;广告短信的退订内幕&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;很多促销广告短信都说回复 T 退订，但是回复了 T 之后会发生什么&lt;/p&gt;
&lt;h3 id=&#34;qrpicturehttpswwwqrpicturecom&#34;&gt;&lt;a href=&#34;https://www.qrpicture.com/&#34;&gt;QRpicture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个在线工具，把图片变成可以扫描的二维码。&lt;/p&gt;
&lt;h3 id=&#34;screenplaysubshttpsscreenplaysubscom&#34;&gt;&lt;a href=&#34;https://screenplaysubs.com/&#34;&gt;ScreenplaySubs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;浏览器插件，播放 Netflix 视频的时候，同步显示剧本内容。&lt;/p&gt;
&lt;h3 id=&#34;umamihttpsumamiis&#34;&gt;&lt;a href=&#34;https://umami.is/&#34;&gt;umami&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个开源的网站访问统计服务。&lt;/p&gt;
&lt;h3 id=&#34;ts-migratehttpsgithubcomairbnbts-migrate&#34;&gt;&lt;a href=&#34;https://github.com/airbnb/ts-migrate&#34;&gt;ts-migrate&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Airbnb 公司新的开源项目，可以将 JavaScript 代码转成 TypeScript 代码。&lt;/p&gt;
&lt;h3 id=&#34;jscoolhttpsgithubcomjs-cooljscool&#34;&gt;&lt;a href=&#34;https://github.com/js-cool/js.cool&#34;&gt;js.cool&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为开源项目提供免费的&lt;code&gt;js.cool&lt;/code&gt;的子域名，类似&lt;code&gt;js.org&lt;/code&gt;，支持 CNAME 绑定&lt;/p&gt;
&lt;h3 id=&#34;screen-share-partyhttpsbanetscreen-share-party&#34;&gt;&lt;a href=&#34;https://ba.net/screen-share-party&#34;&gt;Screen Share Party&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该网站通过 WebRTC 协议把你的桌面分享给其他人。它生成一个 URL，其他人访问这个 URL，就能看到你的桌面&lt;/p&gt;
&lt;h3 id=&#34;mazahttpsgithubcomtanraxmaza-ad-blocking&#34;&gt;&lt;a href=&#34;https://github.com/tanrax/maza-ad-blocking&#34;&gt;maza&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个本地的广告拦截器，通过封锁 DNS 达到拦截广告的目的。它的特点就是非常简单，就是一个 Bash 脚本，可以作为学习脚本编程的范例。&lt;/p&gt;
&lt;h3 id=&#34;统计学习导论httpfacultymarshalluscedugareth-jamesislan-introduction-to-statistical-learning&#34;&gt;&lt;a href=&#34;http://faculty.marshall.usc.edu/gareth-james/ISL/&#34;&gt;统计学习导论&lt;/a&gt;（An Introduction to Statistical Learning）&lt;/h3&gt;
&lt;p&gt;免费英文电子书，可以作为非数学专业学生的统计学教材，侧重机器学习的统计基础，提供 R 语言的例子。&lt;/p&gt;
&lt;h3 id=&#34;1940年纽约历史地图https1940snycmap&#34;&gt;&lt;a href=&#34;https://1940s.nyc/map/&#34;&gt;1940年纽约历史地图&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个网站提供1940年代的纽约在线地图，并且还可以查看各个地点的历史照片。&lt;/p&gt;
&lt;h3 id=&#34;ai-还原古罗马皇帝httpsvoshartcomroman-emperor-project&#34;&gt;&lt;a href=&#34;https://voshart.com/ROMAN-EMPEROR-PROJECT&#34;&gt;AI 还原古罗马皇帝&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个项目使用 AI 模型，将古罗马皇帝的塑像还原成高清晰度人像照片。&lt;/p&gt;
&lt;h3 id=&#34;物理学书单httpswwwsusanjfowlercomblog2016813so-you-want-to-learn-physics&#34;&gt;&lt;a href=&#34;https://www.susanjfowler.com/blog/2016/8/13/so-you-want-to-learn-physics&#34;&gt;物理学书单&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者列了一个英文书单，对于想自学物理学、达到本科以及研究生水平的读者，应该阅读哪些教材。&lt;/p&gt;
&lt;h3 id=&#34;covid-19-舆论新闻可视化httpspearminigiteeioncovis-2020&#34;&gt;&lt;a href=&#34;https://pearmini.gitee.io/ncovis-2020/#/&#34;&gt;COVID-19 舆论新闻可视化&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;山东大学 VisLab 的一个可视化项目，分析疫情对舆论和新闻的影响&lt;/p&gt;
&lt;h3 id=&#34;next-徽标httpswwwlogodesignlovecomnext-logo-paul-rand&#34;&gt;&lt;a href=&#34;https://www.logodesignlove.com/next-logo-paul-rand&#34;&gt;NeXT 徽标&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1986年，乔布斯向著名的平面设计师保罗·兰德（Paul Rand）支付了10万美元，要求为自己的 NeXT 计算机公司设计徽标。&lt;/p&gt;
&lt;h3 id=&#34;姆潘巴现象httpsenwikipediaorgwikimpemba_effect&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mpemba_effect&#34;&gt;姆潘巴现象&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1963年，坦桑尼亚的一个高中上烹饪课，学生们做冰淇淋。&lt;/p&gt;
&lt;p&gt;一个叫做姆潘巴（Erasto Mpemba）的学生，发现了一个奇怪的现象。两个装有相同体积水的容器，一个是35°C，另一个是100°C，同时放进冰箱，竟然是100°C的水首先开始结冰。也就是说，温度高的水会更快结冰，这是为什么？&lt;/p&gt;
&lt;p&gt;物理老师也不知道这是怎么回事，就把这个结果发表出来。这引起物理学界的争论，科学家也无法解释，就把它称为“姆潘巴现象”。&lt;/p&gt;
&lt;p&gt;2012年，英国皇家化学学会举行了一场竞赛，征集论文，对姆潘巴现象进行解释。共有22,000人参加，获胜者提出了两种解释。&lt;/p&gt;
&lt;p&gt;（1）过冷（Supercooling）。低温液体会在一定时间内存在过冷现象，低于凝固点仍维持液体。&lt;/p&gt;
&lt;p&gt;（2）对流。温度高的液体有更高的对流，有利于散热。&lt;/p&gt;
&lt;h3 id=&#34;网络安全工程师的修炼途径httpsdanielmiesslercomblogbuild-successful-infosec-career&#34;&gt;&lt;a href=&#34;https://danielmiessler.com/blog/build-successful-infosec-career/&#34;&gt;网络安全工程师的修炼途径&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者在网络安全方面有20年的从业经验。他在本文中介绍网络安全工程所需的技能和培养途径。他提出，学习者一定要有自己的实验室，熟练使用虚拟机测试各种系统。&lt;/p&gt;
&lt;h3 id=&#34;如何用神经网络玩超级马里奥兄弟httpschrispressogithubioai_learns_to_play_smb_using_ga_and_nn&#34;&gt;&lt;a href=&#34;https://chrispresso.github.io/AI_Learns_To_Play_SMB_Using_GA_And_NN&#34;&gt;如何用神经网络玩超级马里奥兄弟&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://camo.githubusercontent.com/341c2569aca0476fcea72a82669b5926fd8311d6/68747470733a2f2f7777772e77616e67626173652e636f6d2f626c6f67696d672f61737365742f3230323030382f6267323032303038323230312e6a7067&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/341c2569aca0476fcea72a82669b5926fd8311d6/68747470733a2f2f7777772e77616e67626173652e636f6d2f626c6f67696d672f61737365742f3230323030382f6267323032303038323230312e6a7067&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者展示了如何用 Python 写一个神经网络模型，自动玩超级马里奥兄弟，可以很清晰地看懂他的算法，就是将游戏画面转化成一帧帧的像素网格（注意下图两侧画面的对比），根据网格的变化，程序自动做出反应。&lt;/p&gt;
&lt;h3 id=&#34;深入了解-python的官方-docker-映像httpspythonspeedcomarticlesofficial-python-docker-image&#34;&gt;&lt;a href=&#34;https://pythonspeed.com/articles/official-python-docker-image/&#34;&gt;深入了解 Python的官方 Docker 映像&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文是一篇 Docker 教程，一步步介绍 Python 官方的 Docker 镜像是怎么制作的，详细解读 Dockefile 文件&lt;/p&gt;
&lt;h3 id=&#34;理解-python-哈希表httpthepythoncornercomdevhash-tables-understanding-dictionaries&#34;&gt;&lt;a href=&#34;http://thepythoncorner.com/dev/hash-tables-understanding-dictionaries/&#34;&gt;理解 Python 哈希表&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文详细讲解 Python 哈希函数的用法，然后用它实现一个简单的哈希表。&lt;/p&gt;
&lt;h3 id=&#34;如何在谷歌云安装-pi-holehttpsmediumcomdevinjaystokeshow-to-set-up-a-pi-hole-ad-blocking-vpn-server-on-google-clouds-always-free-usage-tier-ff1d8a8c407e&#34;&gt;&lt;a href=&#34;https://medium.com/@devinjaystokes/how-to-set-up-a-pi-hole-ad-blocking-vpn-server-on-google-clouds-always-free-usage-tier-ff1d8a8c407e&#34;&gt;如何在谷歌云安装 Pi-Hole&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一篇非常详细的教程，一步步教你在谷歌云上安装 Pi-Hole，自己搭建一个 DNS 服务器，能够屏蔽广告。&lt;/p&gt;
&lt;h3 id=&#34;如何使用-firebase-开发一个自己的评论系统httpswwwsmashingmagazinecom202008comment-system-firebase英文&#34;&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2020/08/comment-system-firebase/&#34;&gt;如何使用 Firebase 开发一个自己的评论系统&lt;/a&gt;（英文）&lt;/h3&gt;
&lt;p&gt;Firebase 是谷歌的实时数据库服务，本文是如何使用它来储存前端数据的详细教程&lt;/p&gt;
&lt;h3 id=&#34;使用-safari-web-share-api-窃取本地文件httpsblogredteampl202008stealing-local-files-using-safari-webhtml&#34;&gt;&lt;a href=&#34;https://blog.redteam.pl/2020/08/stealing-local-files-using-safari-web.html&#34;&gt;使用 Safari Web Share API 窃取本地文件&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍如何在苹果设备上，利用 Safari 浏览器的 Web Share API 在用户不知情的情况下，将本地文件分享出去。&lt;/p&gt;
&lt;h3 id=&#34;cipheyhttpsgithubcomcipheyciphey&#34;&gt;&lt;a href=&#34;https://github.com/Ciphey/Ciphey&#34;&gt;Ciphey&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有时，我们有一段加密文本，但是不知道它使用什么加密方法。这个命令行工具，会根据人工智能算法，自动判断加密方法，能不能解密。&lt;/p&gt;
&lt;h3 id=&#34;ztextjshttpsbennettfeelycomztext&#34;&gt;&lt;a href=&#34;https://bennettfeely.com/ztext/&#34;&gt;ztext.js&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个 JS 库可以将任何字体变成 3D 效果，支持中文。&lt;/p&gt;
&lt;h3 id=&#34;css-渐变魔法httpswwwgradientmagiccom&#34;&gt;&lt;a href=&#34;https://www.gradientmagic.com/&#34;&gt;CSS 渐变魔法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该网站收集各种 CSS 渐变图像，可以复制到自己的项目。&lt;/p&gt;
&lt;h3 id=&#34;labuladong-的算法小抄httpslabuladonggitbookioalgo&#34;&gt;&lt;a href=&#34;https://labuladong.gitbook.io/algo/&#34;&gt;labuladong 的算法小抄&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;100 多道 LeetCode 算法题目的中文解释。&lt;/p&gt;
&lt;h3 id=&#34;不可能的几何形状httpsim-possibleinfoenglishlibraryindexhtml&#34;&gt;&lt;a href=&#34;https://im-possible.info/english/library/index.html&#34;&gt;不可能的几何形状&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该网站收集各种不可能的几何形状图片，目前已经有两千多张了。&lt;/p&gt;
&lt;h3 id=&#34;puppeteer--playwright-学习教程httpstheheadlessdev&#34;&gt;&lt;a href=&#34;https://theheadless.dev/&#34;&gt;Puppeteer &amp;amp; Playwright 学习教程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一份英语教程，介绍无头浏览器操作库 Puppeteer 和 Playwright 的用法。&lt;/p&gt;
&lt;h3 id=&#34;讲解开源项目httpsgithubcomhellogithub-teamarticle&#34;&gt;&lt;a href=&#34;https://github.com/HelloGitHub-Team/Article&#34;&gt;讲解开源项目&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一组中文的系列文章，介绍各种开源项目和用法&lt;/p&gt;
&lt;h3 id=&#34;富士山公路httpswwwatlasobscuracomarticlessnow-canyon-japan&#34;&gt;&lt;a href=&#34;https://www.atlasobscura.com/articles/snow-canyon-japan&#34;&gt;富士山公路&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;日本有一条通往富士山的高速公路。冬天下雪时，积雪有时厚达几米。扫除路上的积雪以后，就形成了公路两边有雪墙的奇特景象。&lt;/p&gt;
&lt;h3 id=&#34;大公司如何合法避税httpswwwredditcomrcoolguidescommentsifz1nohow_to_not_pay_taxes&#34;&gt;&lt;a href=&#34;https://www.reddit.com/r/coolguides/comments/ifz1no/how_to_not_pay_taxes/&#34;&gt;大公司如何合法避税&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如题&lt;/p&gt;
&lt;h3 id=&#34;肉鸡的由来httpswwwtheguardiancomenvironment2020aug17from-farm-to-factory-the-unstoppable-rise-of-american-chicken&#34;&gt;&lt;a href=&#34;https://www.theguardian.com/environment/2020/aug/17/from-farm-to-factory-the-unstoppable-rise-of-american-chicken&#34;&gt;肉鸡的由来&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如题&lt;/p&gt;
&lt;h3 id=&#34;如何用简单英语写作httpwwwplainenglishcoukhow-to-write-in-plain-englishhtml&#34;&gt;&lt;a href=&#34;http://www.plainenglish.co.uk/how-to-write-in-plain-english.html&#34;&gt;如何用简单英语写作&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍几个很实用的英语写作规则，帮助你写出简单易懂的英语。&lt;/p&gt;
&lt;h3 id=&#34;gps-定位原理httpsblogdigitalbunkerdev20200828how-do-global-positioning-systems-gps-work&#34;&gt;&lt;a href=&#34;https://blog.digitalbunker.dev/2020/08/28/how-do-global-positioning-systems-gps-work/&#34;&gt;GPS 定位原理&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍 GPS 卫星系统如何能够定位，写得比较容易懂。定位的关键是卫星上的原子钟必须准确报时。&lt;/p&gt;
&lt;h3 id=&#34;异步操作需要设置超时httpsrobertovitillocomdefault-timeouts&#34;&gt;&lt;a href=&#34;https://robertovitillo.com/default-timeouts/&#34;&gt;异步操作需要设置超时&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文是一个提醒，进行异步操作的时候（比如 AJAX 请求），要设置超时。因为 AJAX 默认没有超时限制，浏览器会一直等下去，极端情况下，可能会耗尽套接字的资源池。&lt;/p&gt;
&lt;h3 id=&#34;如何让-linux-不区分文件名大小写httpswwwcollaboracomnews-and-blogblog20200827using-the-linux-kernel-case-insensitive-feature-in-ext4&#34;&gt;&lt;a href=&#34;https://www.collabora.com/news-and-blog/blog/2020/08/27/using-the-linux-kernel-case-insensitive-feature-in-ext4/&#34;&gt;如何让 Linux 不区分文件名大小写&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Linux 5.2 开始，支持不区分文件名大小写，本文教你怎么打开这个功能。&lt;/p&gt;
&lt;h3 id=&#34;短消息发送一次性验证码的标准httpstrineocomblog202008phishing-resistant-one-time-codes&#34;&gt;&lt;a href=&#34;https://trineo.com/blog/2020/08/phishing-resistant-one-time-codes&#34;&gt;短消息发送一次性验证码的标准&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;很多网站采用短消息发送一次性验证码，作为用户认证的手段。苹果和谷歌已经商定了短消息格式标准，GitHub 开始采用这个标准。&lt;/p&gt;
&lt;h3 id=&#34;react-列表-key-属性的三个常见错误httpsdevtothawkin3common-mistakes-with-react-keys-1jcc&#34;&gt;&lt;a href=&#34;https://dev.to/thawkin3/common-mistakes-with-react-keys-1jcc&#34;&gt;React 列表 key 属性的三个常见错误&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;React 框架要求列表的每一项都带有&lt;code&gt;key&lt;/code&gt;属性，本文介绍这个属性的三个需要注意的地方。&lt;/p&gt;
&lt;h3 id=&#34;bootstrap-图标库httpsgithubcomtwbsicons&#34;&gt;&lt;a href=&#34;https://github.com/twbs/icons&#34;&gt;Bootstrap 图标库&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bootstrap 的图标库发布1.0正式版，包含1100多个图标，全部都是 SVG 格式，可以插入 img 标签。&lt;/p&gt;
&lt;h3 id=&#34;lunarhttpsgithubcomalin23lunar&#34;&gt;&lt;a href=&#34;https://github.com/alin23/Lunar&#34;&gt;Lunar&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;调节 Mac 电脑外接显示器亮度的软件，可以根据时间，自动调节亮度。&lt;/p&gt;
&lt;h3 id=&#34;nginx-日志分析可视化httpsgithubcomturbowaybigdata_practice&#34;&gt;&lt;a href=&#34;https://github.com/TurboWay/bigdata_practice&#34;&gt;nginx 日志分析可视化&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个完整的大数据实践项目，通过 hive 分析 nginx 日志，将分析结果通过 flask + echarts 进行可视化展示。&lt;/p&gt;
&lt;h3 id=&#34;go-zerohttpsgithubcomtal-techgo-zero&#34;&gt;&lt;a href=&#34;https://github.com/tal-tech/go-zero&#34;&gt;go-zero&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个国产的 web 和 rpc 微服务框架，含极简的 API 定义和生成工具 goctl，可以根据定义的 api 文件一键生成各语言的调用代码。&lt;/p&gt;
&lt;h3 id=&#34;ios-开发课程httpscs193psitesstanfordedu&#34;&gt;&lt;a href=&#34;https://cs193p.sites.stanford.edu/&#34;&gt;iOS 开发课程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;斯坦福大学的高质量免费课程，使用了最新的 SwiftUI，充分展示了 APP 开发的整个流程，适合新手进行 iOS 的开发入门。&lt;/p&gt;
&lt;h3 id=&#34;1gb-手机流量的价格httpswwwcablecoukmobilesworldwide-data-pricing&#34;&gt;&lt;a href=&#34;https://www.cable.co.uk/mobiles/worldwide-data-pricing/&#34;&gt;1GB 手机流量的价格&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该网站收集全世界各国家和地区的 1GB 手机流量的价格。中国大陆的平均价格是0.61美元，排在第12位，属于手机上网很便宜的地方。美国平均需要8美元，排在第188位，是非常贵的地方。&lt;/p&gt;
&lt;h3 id=&#34;面向初学者的-python-项目httpswwwcodewithreplitpython-projects-for-beginnershtml&#34;&gt;&lt;a href=&#34;https://www.codewithrepl.it/python-projects-for-beginners.html&#34;&gt;面向初学者的 Python 项目&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如题，一本免费 Python 教程，使用 Repl.it 在线编程环境学习 Python。&lt;/p&gt;
&lt;h3 id=&#34;在线工具秘籍httpsgithubcomzhaooleeonlinetoolsbook&#34;&gt;&lt;a href=&#34;https://github.com/zhaoolee/OnlineToolsBook&#34;&gt;在线工具秘籍&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个中文仓库收集各种好用的在线小工具。&lt;/p&gt;
&lt;h3 id=&#34;面向程序员的实用深度学习httpscoursefastai&#34;&gt;&lt;a href=&#34;https://course.fast.ai/&#34;&gt;面向程序员的实用深度学习&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;fast.ai 公司推出的深度学习教程。&lt;/p&gt;
&lt;h3 id=&#34;世界最长的火车路线httpsbasementgeographercomthe-longest-train-ride-in-the-world&#34;&gt;&lt;a href=&#34;https://basementgeographer.com/the-longest-train-ride-in-the-world/&#34;&gt;世界最长的火车路线&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;目前，世界最长的火车路线是从葡萄牙首都波尔多开始，一直到达越南南部，全长17000公里。你可以全程乘坐火车，但需要经过多次换车。&lt;/p&gt;
&lt;p&gt;整个路程最快也要耗时327小时，相当于13天半，总票价2000美元以上。&lt;/p&gt;
&lt;h3 id=&#34;巴比伦乘法公式httpswwwiquilezlesorgblogp4582&#34;&gt;&lt;a href=&#34;https://www.iquilezles.org/blog/?p=4582&#34;&gt;巴比伦乘法公式&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;古代巴比伦人使用下面的公式，计算两个数的乘积。
$$
ab=\frac{(a+b)^2-(a-b)^2}4
$$&lt;/p&gt;
&lt;h3 id=&#34;高德納自述我对电子邮件的态度httpswww-cs-facultystanfordeduknuthemailhtml&#34;&gt;&lt;a href=&#34;https://www-cs-faculty.stanford.edu/~knuth/email.html&#34;&gt;高德納自述：我对电子邮件的态度&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Donald E. Knuth 教授
计算机科学系 斯坦福大学
盖茨大楼4B
斯坦福大学
CA 94305-9045美国&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;沙皇核弹纪录片httpsthebarentsobservercomensecurity202008rosatom-releases-previously-classified-documentary-video-50-mt-novaya-zemlya-test&#34;&gt;&lt;a href=&#34;https://thebarentsobserver.com/en/security/2020/08/rosatom-releases-previously-classified-documentary-video-50-mt-novaya-zemlya-test&#34;&gt;沙皇核弹纪录片&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;今年8月20日，为了纪念苏联核工业发展75周年，俄罗斯在 YouTube 上发布了一部讲述沙皇核弹的纪录片。&lt;/p&gt;
&lt;h3 id=&#34;我的业余作品如何以3万美元出售httpsmarciotweet-photo-acquired&#34;&gt;&lt;a href=&#34;https://marc.io/tweet-photo-acquired&#34;&gt;我的业余作品如何以3万美元出售&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者最初写了一篇文章，介绍如何将 Instagram 图片同步到推特，结果发现浏览量很高。有人还写信，愿意付费使用该功能。作者就把它做成一个小服务，结果被3万美元收购。&lt;/p&gt;
&lt;h3 id=&#34;如何使用-github-管理个人笔记httpswwwbit-101comblog202009git-based-wiki&#34;&gt;&lt;a href=&#34;https://www.bit-101.com/blog/2020/09/git-based-wiki/&#34;&gt;如何使用 GitHub 管理个人笔记&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者介绍他如何将 GitHub 仓库当作 Wiki 使用，管理个人笔记。&lt;/p&gt;
&lt;h3 id=&#34;10个你可能不知道的-web-apihttpsbloggreenrootsinfo10-lesser-known-web-apis-you-may-want-to-use-ckejv75cr012y70s158n85yhn&#34;&gt;&lt;a href=&#34;https://blog.greenroots.info/10-lesser-known-web-apis-you-may-want-to-use-ckejv75cr012y70s158n85yhn&#34;&gt;10个你可能不知道的 Web API&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Chrome 浏览器提供的 Web API 非常多，本文介绍其中10个。&lt;/p&gt;
&lt;h3 id=&#34;如何在浏览器里制作一个互动地球仪httpsstripecomblogglobe&#34;&gt;&lt;a href=&#34;https://stripe.com/blog/globe&#34;&gt;如何在浏览器里制作一个互动地球仪&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者介绍如何使用 WebGL（通过 three.js）在浏览器里面做出一个可以互动的地球仪。&lt;/p&gt;
&lt;h3 id=&#34;浮点数原理httpstimroderickcomfloating-point-introduction&#34;&gt;&lt;a href=&#34;https://timroderick.com/floating-point-introduction/&#34;&gt;浮点数原理&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文较为通俗地解释，什么是浮点数，为什么这么设计。&lt;/p&gt;
&lt;h3 id=&#34;如何在亚马逊网络服务上部署一个-react-apphttpsawsamazoncomgetting-startedhands-onbuild-react-app-amplify-graphqlmodule-one&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/getting-started/hands-on/build-react-app-amplify-graphql/module-one/&#34;&gt;如何在亚马逊网络服务上部署一个 React App&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;官方文档，介绍如何用 AWS Amplify 自动构建和部署一个 React 应用。跟亚马逊的其他文档相比，写得非常好懂。&lt;/p&gt;
&lt;h3 id=&#34;mongodb-的历史httpswwwquickprogrammingtipscommongodbmongodb-historyhtml&#34;&gt;&lt;a href=&#34;https://www.quickprogrammingtips.com/mongodb/mongodb-history.html&#34;&gt;MongoDB 的历史&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;MongoDB 是现在最流行的 NoSQL 数据库，本文详尽介绍了它的历史，以及早期的设计决定。&lt;/p&gt;
&lt;h3 id=&#34;55k-月用户的-web-应用成本httpskeepthescorecoblogpostscosts-of-running-webapp&#34;&gt;&lt;a href=&#34;https://keepthescore.co/blog/posts/costs-of-running-webapp/&#34;&gt;55K 月用户的 Web 应用成本&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者维护着一个 Python flask 应用，每月有5.5万访问者。本文总结了他每月花在这个网站上的账单。&lt;/p&gt;
&lt;h3 id=&#34;responsivelyhttpsgithubcomresponsively-orgresponsively-app&#34;&gt;&lt;a href=&#34;https://github.com/responsively-org/responsively-app&#34;&gt;responsively&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个方便的桌面软件，集成了开发和调试响应式网页的各种功能。&lt;/p&gt;
&lt;h3 id=&#34;网页骨架布局生成器httpsskeletonreactcom&#34;&gt;&lt;a href=&#34;https://skeletonreact.com/&#34;&gt;网页骨架布局生成器&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有些网页加载时，会显示一个骨架布局（上图），获取正式内容后再替换掉。这个在线工具就用来生成骨架布局，支持 React、React Native、Vue 和 普通 HTML。&lt;/p&gt;
&lt;h3 id=&#34;解决算法和数据结构问题python-版httpswwwcsaucklandacnzcompsci105s1cresourcesproblemsolvingwithalgorithmsanddatastructurespdf&#34;&gt;&lt;a href=&#34;https://www.cs.auckland.ac.nz/compsci105s1c/resources/ProblemSolvingwithAlgorithmsandDataStructures.pdf&#34;&gt;解决算法和数据结构问题（Python 版）&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;免费的英文电子书， 使用 Python 语言介绍基本的算法和数据结构，内容比较简单，也不厚200多页，适合初学者。&lt;/p&gt;
&lt;h3 id=&#34;degooglehttpsdegooglejmooredev&#34;&gt;&lt;a href=&#34;https://degoogle.jmoore.dev/&#34;&gt;degoogle&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该网站收集各种谷歌服务的替代品。&lt;/p&gt;
&lt;h3 id=&#34;winamp-皮肤图书馆httpsskinswebamporg&#34;&gt;&lt;a href=&#34;https://skins.webamp.org/&#34;&gt;Winamp 皮肤图书馆&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;该网站收集各种 Winamp 播放器的皮肤。&lt;/p&gt;
&lt;h3 id=&#34;web-api-设计httpslivebookmanningcombookthe-design-of-web-apischapter-1originproduct-tocthe-design-of-web-apis&#34;&gt;&lt;a href=&#34;https://livebook.manning.com/book/the-design-of-web-apis/chapter-1?origin=product-toc&#34;&gt;Web API 设计&lt;/a&gt;（The Design of Web APIs）&lt;/h3&gt;
&lt;p&gt;Manning 出版社的英文书籍，现在官方提供在线免费阅读，内容很不错，关于怎么设计 Web 应用的 API。&lt;/p&gt;
&lt;h3 id=&#34;inux-从零开始httpwwwlinuxfromscratchorglfsview100-rc1prologueforewordhtmllinux-from-scratch&#34;&gt;&lt;a href=&#34;http://www.linuxfromscratch.org/lfs/view/10.0-rc1/prologue/foreword.html&#34;&gt;inux 从零开始&lt;/a&gt;（Linux From Scratch）&lt;/h3&gt;
&lt;p&gt;一本英文的免费书籍，讲述如何从源码一步步编译一个自己的 Linux 系统，帮助你深入理解 Linux。&lt;/p&gt;
&lt;h3 id=&#34;水上飞行器-ekranoplanhttpswwwpopularmechanicscommilitaryaviationa33808381russia-ekranoplan-plane-boat-wrecked&#34;&gt;&lt;a href=&#34;https://www.popularmechanics.com/military/aviation/a33808381/russia-ekranoplan-plane-boat-wrecked/&#34;&gt;水上飞行器 Ekranoplan&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;RT.&lt;/p&gt;
&lt;h3 id=&#34;核电池可以用于太空旅行httpswwwgenerationatomicorgskimthe-nuclear-heartbeat-of-space-exploration&#34;&gt;&lt;a href=&#34;https://www.generationatomic.org/skim/the-nuclear-heartbeat-of-space-exploration&#34;&gt;核电池可以用于太空旅行&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍了核电池的原理（利用放射性元素衰变产生的能量），以及用于太空旅行的可能性。&lt;/p&gt;
&lt;h3 id=&#34;使用蒙特卡洛算法玩2048httpsxtrpioblog20200912using-the-monte-carlo-tree-search-algorithm-in-an-ai-to-beat-2048-and-other-games&#34;&gt;&lt;a href=&#34;https://xtrp.io/blog/2020/09/12/using-the-monte-carlo-tree-search-algorithm-in-an-ai-to-beat-2048-and-other-games/&#34;&gt;使用蒙特卡洛算法玩2048&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;2048 是一个4x4的方块游戏，只要两个相同数字相邻，就可以合并为一个数字。本文讲解了如何用蒙特卡洛算法进行简单模拟，让计算机自己解决2048游戏。&lt;/p&gt;
&lt;h3 id=&#34;for-await--of-语句解释httpswwwmikealchecomsoftware-developmenta-simple-explanation-of-the-for-await-of-statement-in-node-js&#34;&gt;&lt;a href=&#34;https://www.mikealche.com/software-development/a-simple-explanation-of-the-for-await-of-statement-in-node-js&#34;&gt;for await &amp;hellip; of 语句解释&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ES6 引入了 for await &amp;hellip; of 新语法，用来遍历异步迭代器，很多人还不熟悉。本文是对它的简单解释。&lt;/p&gt;
&lt;h3 id=&#34;使用-react-钩子而不是类的6个理由httpsblogbitsrcio6-reasons-to-use-react-hooks-instead-of-classes-7e3ee745fe04&#34;&gt;&lt;a href=&#34;https://blog.bitsrc.io/6-reasons-to-use-react-hooks-instead-of-classes-7e3ee745fe04&#34;&gt;使用 React 钩子而不是类的6个理由&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文总结 React 钩子比类更有优势的6个方面，比如不再有 this 问题，也不用再绑定方法了。&lt;/p&gt;
&lt;h3 id=&#34;avif-格式初探httpsjakearchibaldcom2020avif-has-landed&#34;&gt;&lt;a href=&#34;https://jakearchibald.com/2020/avif-has-landed/&#34;&gt;AVIF 格式初探&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/5a8b70251077f1c3b472fcd2438532845eeb85d0/68747470733a2f2f7777772e77616e67626173652e636f6d2f626c6f67696d672f61737365742f3230323030392f6267323032303039313731312e6a7067&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;AVIF 是一种开源图片格式，源自 AV1 视频格式。各个平台基本上都会支持，这篇文章对比了它与 JPEG 和 WebP 格式，结果很不错。&lt;/p&gt;
&lt;h3 id=&#34;nodejs-如何下载流传输文件httpsphilnashblog20200806how-to-stream-file-downloads-in-node-js-with-got&#34;&gt;&lt;a href=&#34;https://philna.sh/blog/2020/08/06/how-to-stream-file-downloads-in-Node-js-with-got/&#34;&gt;Node.js 如何下载流传输文件&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文介绍如何使用 Got 这个库，以流传输的形式（stream）下载文件。&lt;/p&gt;
&lt;h3 id=&#34;diffcheckerhttpswwwdiffcheckercom&#34;&gt;&lt;a href=&#34;https://www.diffchecker.com/&#34;&gt;Diffchecker&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个在线工具，可以检查文本、图片、PDF 之间的差异。&lt;/p&gt;
&lt;h3 id=&#34;screelyhttpswwwscreelycom&#34;&gt;&lt;a href=&#34;https://www.screely.com/&#34;&gt;Screely&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个在线工具，可以生成网页展示效果的示意图。&lt;/p&gt;
&lt;h3 id=&#34;poolside-fmhttpspoolsidefm&#34;&gt;&lt;a href=&#34;https://poolside.fm/&#34;&gt;Poolside FM&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个在线的复古风格音乐电台。&lt;/p&gt;
&lt;h3 id=&#34;mimestreamhttpsmimestreamcom&#34;&gt;&lt;a href=&#34;https://mimestream.com/&#34;&gt;Mimestream&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;前苹果邮件客户端工程师 Neil Jhaveri 推出的 Gmail macOS 原生客户端，外观简洁大方，十分契合原生风格&lt;/p&gt;
&lt;h3 id=&#34;kibana-eyehttpsgithubcomcasterwxkibana-eye&#34;&gt;&lt;a href=&#34;https://github.com/CasterWx/kibana-eye&#34;&gt;kibana-eye&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ELK 平台（Elasticsearch，Logstash，Kibana）的定时任务管理工具，可以聚合处理日志，生成报表信息，通过邮件/钉钉等方式发送通知。&lt;/p&gt;
&lt;h3 id=&#34;lofimusichttpslofimusicapp&#34;&gt;&lt;a href=&#34;https://lofimusic.app/&#34;&gt;LofiMusic&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个开源的背景音乐播放网站。&lt;/p&gt;
&lt;h3 id=&#34;beewarehttpsbeewareorg&#34;&gt;&lt;a href=&#34;https://beeware.org/&#34;&gt;BeeWare&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个 Python 工具，让你的 Python 代码可以打包成跨平台图形界面应用，尤其是可以打包成手机 App，支持 iOS、Android、Windows、MacOS、Linux、Web 等平台。&lt;/p&gt;
&lt;h3 id=&#34;aggregated-awesomehttpsaggregatedawesomecom&#34;&gt;&lt;a href=&#34;https://aggregatedawesome.com/&#34;&gt;Aggregated Awesome&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;GitHub 上面有很多 awesome 的仓库，收集某个主题的所有有用的内容。这个网页整理了一个 awesome 仓库的清单。&lt;/p&gt;
&lt;h3 id=&#34;fuel-collectionhttpsappignitionroboticsorggoogleresearchfuelcollectionsgoogle-scanned-objects&#34;&gt;[Fuel Collection](&lt;a href=&#34;https://app.ignitionrobotics.org/GoogleResearch/fuel/collections/Google&#34;&gt;https://app.ignitionrobotics.org/GoogleResearch/fuel/collections/Google&lt;/a&gt; Scanned Objects)&lt;/h3&gt;
&lt;p&gt;谷歌对大量日常物品进行了 3D 扫描，将数据放在网上，提供公开下载。&lt;/p&gt;
&lt;h3 id=&#34;prime-curioshttpsprimesutmeducurios&#34;&gt;&lt;a href=&#34;https://primes.utm.edu/curios/&#34;&gt;Prime Curios!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个网站收集各种与质数相关的数字，比如 561 的平方加2和减2会得到两个连续的质数。&lt;/p&gt;
&lt;h3 id=&#34;顶级域名列表httpdataianaorgtldtlds-alpha-by-domaintxt&#34;&gt;&lt;a href=&#34;http://data.iana.org/TLD/tlds-alpha-by-domain.txt&#34;&gt;顶级域名列表&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;互联网号码分配局（IANA）官方的目前所有顶级域名（TLD）的列表，共有1508个。如果排除国家和地区的 TLD，则为1260个。&lt;/p&gt;
&lt;h3 id=&#34;如何写一个简单的-c-语言解释器httpsgithubcomlotaboutwrite-a-c-interpretertreemastertutorialen&#34;&gt;&lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter/tree/master/tutorial/en&#34;&gt;如何写一个简单的 C 语言解释器&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个英语教程，通过写一个简单的 C 语言解释器，理解编译原理。&lt;/p&gt;
&lt;h3 id=&#34;webrtc-示例仓库httpswebrtcgithubiosamples&#34;&gt;&lt;a href=&#34;https://webrtc.github.io/samples/&#34;&gt;WebRTC 示例仓库&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebRTC 是浏览器点对点通信的 API，这个仓库给出了各种使用示例，覆盖了主要的使用场景。&lt;/p&gt;
&lt;h3 id=&#34;黑河-腾冲线httpszhwikipediaorgwiki黑河-腾冲线&#34;&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%BB%91%E6%B2%B3-%E8%85%BE%E5%86%B2%E7%BA%BF&#34;&gt;黑河-腾冲线&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;中国地图上，从黑河到腾冲画一条线，这条线以东住着全国94%的人口。这是1935年由地理学家胡焕庸首次提出。&lt;/p&gt;
&lt;h3 id=&#34;内卷化是什么&#34;&gt;内卷化是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“内卷化，指一种社会或文化模式在某一发展阶段达到一种确定的形式后，便停滞不前或无法转化为另一种高级模式的现象。”（&lt;a href=&#34;https://baike.baidu.com/item/%E5%86%85%E5%8D%B7%E5%8C%96&#34;&gt;百度百科&lt;/a&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网上说，这个词是美国人首先提出的，英语单词是 involution，出自1960年的一本著作《农业内卷化——印度尼西亚的生态变化过程》（Agricultural Involution）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/43670d57cc2dda62be2c511252673eb480023b1d/68747470733a2f2f7777772e77616e67626173652e636f6d2f626c6f67696d672f61737365742f3230323030392f6267323032303039313930342e6a7067&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Involution 是一个很罕见的英语单词，平时用得很少，小型词典都不收，维基百科甚至都没有加入“发展停滞”这个涵义，反而是中国人比较多用“内卷化”这个概念。&lt;/p&gt;
&lt;p&gt;虽然不熟悉 involution，但是我想起另外两个常用词：evolution（进化）和 revolution（革命）。它们共同的词根&lt;code&gt;volute&lt;/code&gt;，拉丁语原意是“滚动”。&lt;/p&gt;
&lt;p&gt;有了“滚动”这个词根，这些词的含义就比较清楚了。&lt;code&gt;evolution&lt;/code&gt;的前缀是&lt;code&gt;ex-&lt;/code&gt;（“向外的”），向外滚动就是进化；&lt;code&gt;revolution&lt;/code&gt;的前缀是&lt;code&gt;re-&lt;/code&gt;（“再次的”），再次滚动、颠覆现状就是革命；&lt;code&gt;involution&lt;/code&gt;的前缀是&lt;code&gt;in-&lt;/code&gt;（“向内的”），向内滚动当然就是内卷了。&lt;/p&gt;
&lt;p&gt;我现在对“内卷化”的理解是， &lt;strong&gt;当一个组织不能或不愿向外发展时，成员的精力就只好用到组织内部，这时就会出现“内卷化”，也就是内部的过度发展。&lt;/strong&gt; 举例来说，海上的一艘船，外卷化就是大家齐心协力划向对岸，内卷化就是大家心思不在划船，而放在内部的互相牵扯（组织建设、规章制度、人事安排等等）。&lt;/p&gt;
&lt;p&gt;一旦出现“内卷化”，对外的扩张和发展就停滞了。希望我们国家继续“外卷化”，不要出现“内卷化”。&lt;/p&gt;
&lt;h3 id=&#34;板书的直播方法httpsmothershipsg202009cd-zoom-hack-camera-teacher&#34;&gt;&lt;a href=&#34;https://mothership.sg/2020/09/cd-zoom-hack-camera-teacher/&#34;&gt;板书的直播方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;疫情期间，老师们都通过网络直播进行教学。但是，摄像头都是拍人脸，直播板书非常困难。美国一个老师想出了简单的解决方法，她在笔记本盖子上，用胶纸绑了一支铅笔，然后以铅笔作为支柱，放了一张 CD 碟片，当作反光的镜子。&lt;/p&gt;
&lt;p&gt;她把本子放在键盘上做笔记，内容就会通过 CD 碟片反射到摄像头，从而直播出去。&lt;/p&gt;
&lt;h3 id=&#34;a-picture-of-java-in-2020httpsblogjetbrainscomidea202009a-picture-of-java-in-2020&#34;&gt;&lt;a href=&#34;https://blog.jetbrains.com/idea/2020/09/a-picture-of-java-in-2020/&#34;&gt;A Picture of Java in 2020&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;IntelliJ IDEA 的最新调查发现，中国有51%的程序员使用 Java 语言，这个比例全球最高。由于 Java 主要是大中型企业在用，这是不是说明，中国的个人开发者和小企业程序员其实比例很小？&lt;/p&gt;
&lt;h3 id=&#34;vscode-如何调试可视化数据结构httpsaddyosmanicomblogvisualize-data-structures-vscode&#34;&gt;&lt;a href=&#34;https://addyosmani.com/blog/visualize-data-structures-vscode/&#34;&gt;VSCode 如何调试可视化数据结构&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;VSCode 有一个插件，可以用可视化的方式调试代码。本文介绍这个插件的用法。&lt;/p&gt;
&lt;h3 id=&#34;cs107e-树莓派arm-和操作系统httpscjtingme20200911cs107e-review&#34;&gt;&lt;a href=&#34;https://cjting.me/2020/09/11/cs107e-review/&#34;&gt;CS107e: 树莓派，ARM 和操作系统&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CS107e 是斯坦福大学的一门计算机课程，内容关于硬件、底层和 C 语言 。这篇文章是作者的学习感受&lt;/p&gt;
&lt;h3 id=&#34;我如何使用-netlify-的-serverless-功能httpsttntmmeblogserverless-recipes-app-faunadb-vuejs&#34;&gt;&lt;a href=&#34;https://ttntm.me/blog/serverless-recipes-app-faunadb-vuejs/&#34;&gt;我如何使用 Netlify 的 Serverless 功能&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者介绍他如何开发一个没有后端服务器、只有前端静态网页的 Web 数据库应用。&lt;/p&gt;
&lt;h3 id=&#34;谷歌搜索的10个小技巧httpsmediumcomshalithasuranga10-hidden-features-in-google-search-83b347b48157&#34;&gt;&lt;a href=&#34;https://medium.com/@shalithasuranga/10-hidden-features-in-google-search-83b347b48157&#34;&gt;谷歌搜索的10个小技巧&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;谷歌搜索有很多小功能，比如搜索&lt;code&gt;stopwatch&lt;/code&gt;会出现一个倒计时器&lt;/p&gt;
&lt;h3 id=&#34;中国大周期httpsfinancesinacomcnchinagncj2020-09-21doc-iivhvpwy8038347shtml&#34;&gt;&lt;a href=&#34;https://finance.sina.com.cn/china/gncj/2020-09-21/doc-iivhvpwy8038347.shtml&#34;&gt;中国大周期&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;桥水基金创始人瑞·达利欧（Ray Dalio）的长文，以一个美国人的角度，谈了他对中国历史和经济政策的理解。这里是中文摘译版，也有&lt;a href=&#34;https://www.principles.com/the-changing-world-order/#chapter5&#34;&gt;英文原版&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;github-仓库的默认分支不叫master了httpswwwjiqizhixincomarticles2020-09-21-10&#34;&gt;&lt;a href=&#34;https://www.jiqizhixin.com/articles/2020-09-21-10&#34;&gt;GitHub 仓库的默认分支不叫“master”了&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;从 2020 年 10 月 1 日开始，GitHub 所有新库的默认分支都将用中性词“main”命名，取代原来的“master”。&lt;/p&gt;
&lt;h3 id=&#34;javascript-原生的日期和时间格式化httpselijahmanorcomblogformat-js-dates-and-times&#34;&gt;&lt;a href=&#34;https://elijahmanor.com/blog/format-js-dates-and-times&#34;&gt;JavaScript 原生的日期和时间格式化&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通常使用外部库处理 JavaScript 的时间格式，但是原生的&lt;code&gt;Date.prototype.toLocale*&lt;/code&gt;方法其实也能满足需求。&lt;/p&gt;
&lt;h3 id=&#34;如何使用-canvas-模拟对象碰撞httpsjoshbradleymeobject-collisions-with-canvas&#34;&gt;&lt;a href=&#34;https://joshbradley.me/object-collisions-with-canvas/&#34;&gt;如何使用 Canvas 模拟对象碰撞&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本文从头教你在网页上，用 Canvas 做出对象不断碰撞的动画效果。&lt;/p&gt;
&lt;h3 id=&#34;instantpagehttpsinstantpage&#34;&gt;&lt;a href=&#34;https://instant.page/&#34;&gt;instant.page&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个 JavaScript 库，用户鼠标悬停在某个链接上方时，就自动加载该链接，从而加快页面跳转的速度。&lt;/p&gt;
&lt;h3 id=&#34;toonifyhttpstoonifyjustinpinkneycom&#34;&gt;&lt;a href=&#34;https://toonify.justinpinkney.com/&#34;&gt;Toonify&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个在线工具，可以将真人头像变成卡通头像。&lt;/p&gt;
&lt;h3 id=&#34;advanced-rest-clienthttpsinstalladvancedrestclientcominstall&#34;&gt;&lt;a href=&#34;https://install.advancedrestclient.com/install&#34;&gt;Advanced Rest Client&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个 Rest API 测试工具，基于 Electron 的跨平台桌面软件。&lt;/p&gt;
&lt;h3 id=&#34;kbhttpsgithubcomgnebbiakb&#34;&gt;&lt;a href=&#34;https://github.com/gnebbia/kb&#34;&gt;kb&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个极简的命令行笔记管理软件。&lt;/p&gt;
&lt;h3 id=&#34;kivyhttpsgithubcomkivykivy&#34;&gt;&lt;a href=&#34;https://github.com/kivy/kivy&#34;&gt;Kivy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个 Python 的 UI 框架，可以打包成 Windows、Linux、MacOS、 Android 和 iOS 应用，特别为多点触摸设备而设计。&lt;/p&gt;
&lt;h3 id=&#34;openglcamera2httpsgithubcomgithubhaohaoopenglcamera2&#34;&gt;&lt;a href=&#34;https://github.com/githubhaohao/OpenGLCamera2&#34;&gt;OpenGLCamera2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个安卓相机 App 的源码，使用 OpenGL ES 3.0 实现 30 种相机滤镜。&lt;/p&gt;
&lt;h3 id=&#34;twister-oshttpstwisteroscom&#34;&gt;&lt;a href=&#34;https://twisteros.com/&#34;&gt;Twister OS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个树莓派的操作系统，可以让桌面变得像 MacOS 或 Windows。&lt;/p&gt;
&lt;h3 id=&#34;things-come-aparthttpswwwtoddmclellancomthingscomeapart&#34;&gt;&lt;a href=&#34;https://www.toddmclellan.com/thingscomeapart&#34;&gt;Things come apart&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个艺术项目，将各种东西拆开，零件放在一起，做成一张海报。&lt;/p&gt;
&lt;h3 id=&#34;一页-pythonhttpdamiantgordoncompythonmonday&#34;&gt;&lt;a href=&#34;http://damiantgordon.com/PythonMonday/&#34;&gt;一页 Python&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个英文的 Python 初学者教程，特点是每一讲的讲义都只有一页 A4 纸。&lt;/p&gt;
&lt;h3 id=&#34;吉布力动画图片httpwwwghiblijpinfo013344&#34;&gt;&lt;a href=&#34;http://www.ghibli.jp/info/013344/&#34;&gt;吉布力动画图片&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;吉布力工作室在官网上放出了8部影片的动画图片下载，一共400张。&lt;/p&gt;
&lt;h3 id=&#34;暴力破解密码所需的时间httpsdiggcom2020password-difficulty-hacking&#34;&gt;&lt;a href=&#34;https://digg.com/2020/password-difficulty-hacking&#34;&gt;暴力破解密码所需的时间&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下表列出了暴力破解各种密码所需的时间。标题行的各栏依次为，纯数字密码、小写字母密码、字母密码、数字字母密码、数字字母符号密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/fe1b9b2328339ed865d9a29ef3f2111b1ef2a847/68747470733a2f2f7777772e77616e67626173652e636f6d2f626c6f67696d672f61737365742f3230323030392f6267323032303039313332322e6a7067&#34; alt=&#34;TIME&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;第一个魔方rubiks-cubehttpswwwnytimescom20200916bookserno-rubik-rubiks-cube-inventor-cubedhtml&#34;&gt;&lt;a href=&#34;https://www.nytimes.com/2020/09/16/books/erno-rubik-rubiks-cube-inventor-cubed.html&#34;&gt;第一个魔方Rubik&amp;rsquo;s cube&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1974年，匈牙利建筑学教授 Erno Rubik，发明了魔方，当时他30岁。&lt;/p&gt;
&lt;p&gt;下图就是他的第一个魔方，是用木头做的。为了识别，有的方块缺了一个圆圈，有的方块贴了白纸，有的方块缺了一个角……&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/cf3ef5fb79a7815d464b2b6c4bbbde82c7aae026/68747470733a2f2f7777772e77616e67626173652e636f6d2f626c6f67696d672f61737365742f3230323030392f6267323032303039313731322e6a7067&#34; alt=&#34;Rubik&amp;rsquo;s cube&#34;&gt;&lt;/p&gt;
- https://www.openheart.icu/cs/interesting/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Oracle</title>
        <link>https://www.openheart.icu/cs/oracle/</link>
        <pubDate>Tue, 21 Jul 2020 20:28:00 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/oracle/</guid>
        <description>42th openheart https://www.openheart.icu/cs/oracle/ -&lt;h1 id=&#34;common-operation&#34;&gt;Common Operation&lt;/h1&gt;
&lt;h2 id=&#34;删除操作前一定要先执行一遍查询&#34;&gt;删除操作前一定要先执行一遍查询&lt;/h2&gt;
&lt;p&gt;如题， 带的一个新员工做补丁把项目历史数据干掉了 My bad.&lt;/p&gt;
&lt;p&gt;2020-8-7&lt;/p&gt;
&lt;h1 id=&#34;optimize&#34;&gt;Optimize&lt;/h1&gt;
&lt;h2 id=&#34;索引失效&#34;&gt;索引失效&lt;/h2&gt;
&lt;p&gt;SQL在&lt;code&gt;WHERE&lt;/code&gt;条件里面使用了&lt;code&gt;IN&lt;/code&gt;导致有一个关联表的索引失效，Oracle版本为11g&lt;/p&gt;
&lt;p&gt;条件中有or，要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引&lt;/p&gt;
&lt;p&gt;like查询是以%开头&lt;/p&gt;
&lt;p&gt;如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引&lt;/p&gt;
&lt;h2 id=&#34;分库-分表-分区&#34;&gt;分库 分表 分区&lt;/h2&gt;
&lt;h2 id=&#34;视图优化&#34;&gt;视图优化&lt;/h2&gt;
&lt;h3 id=&#34;基表增加索引&#34;&gt;基表增加索引&lt;/h3&gt;
&lt;p&gt;对基表中，视图查询SQL的&lt;code&gt;WHERE&lt;/code&gt;条件中用到的字段增加索引&lt;/p&gt;
&lt;h3 id=&#34;重新进行表分析&#34;&gt;重新进行表分析&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- 视图查询慢
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;analyze&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table_name&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delete&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;statistics&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;analyze&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table_name&lt;/span&gt; compute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;statistics&lt;/span&gt;;

&lt;span style=&#34;color:#228b22&#34;&gt;-- 在当前用户下执行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;analyze table &amp;#39;&lt;/span&gt;||&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table_name&lt;/span&gt;||&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; compute statistics;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; user_tables &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table_name&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;IN&lt;/span&gt; (&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;tablename&amp;#39;&lt;/span&gt;);   

&lt;span style=&#34;color:#228b22&#34;&gt;-- 得到如下语句，将这些语句整体执行一遍
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;analyze&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt; PRODUCT_REF_LIST_NESTEDTAB compute &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;statistics&lt;/span&gt;;
    &lt;span style=&#34;color:#228b22&#34;&gt;-- ....
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;-- 查看统计信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table_name&lt;/span&gt;,num_rows &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; user_tables;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分析的结果被Oracle用于基于成本的优化生成更好的查询计划。&lt;/p&gt;
&lt;p&gt;遇到当前表的查询或其他性能不好时，就可以对相应的表进行一次分析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你的表经常由几千万变成几百万，又变成几千万那么需要制定分析计划定期表分析，同时可以一并分析索引，计算索引中数据的分布情况，这样CBO会选择更加准确的执行计划。&lt;/li&gt;
&lt;li&gt;如果表结构变化了也要做下，也就是经常对表做dml就需要分析，现在推荐使用dbms_stats包。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;error&#34;&gt;ERROR&lt;/h1&gt;
&lt;h2 id=&#34;ora-01779-无法修改与非键值保存表对应的列&#34;&gt;ORA-01779: 无法修改与非键值保存表对应的列&lt;/h2&gt;
&lt;p&gt;这里要搞清楚三个概念：视图、联接视图、可更新的联接视图&lt;/p&gt;
&lt;h3 id=&#34;视图&#34;&gt;视图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;视图&lt;/strong&gt;可以分为视图对象和内嵌视图两种。&lt;/p&gt;
&lt;h4 id=&#34;视图对象view-object&#34;&gt;视图对象（View Object）&lt;/h4&gt;
&lt;p&gt;数据库里的&lt;strong&gt;视图对象&lt;/strong&gt;跟一张表或索引等一样，是数据库对象中的一种，它其实是将基于表中原始数据的查询给虚拟了一层之后，提供给外部查询的一种对象。
其本质是并不保存查询的实际结果，而只是将查询语句保存在数据库中，当用户查询某张视图的时候，就会找到并执行这个视图的语句。
而&lt;strong&gt;联接视图&lt;/strong&gt;其实就是在一个视图中将两个表建立关联就是了。&lt;/p&gt;
&lt;h4 id=&#34;内嵌视图inline-view&#34;&gt;内嵌视图（Inline View）&lt;/h4&gt;
&lt;p&gt;在SQL语句中，很多地方都可以写嵌套的语句，比如说，FROM后面可以套括号嵌套其他的语句，WHERE、SELECT、UPDATE、INSERT、DELETE后面都是可以写的。只是写的位置不同，执行的方式还有处理时的一些限制不同，这些SQL中嵌套的SQL被称为&lt;strong&gt;子查询（Subquery）&lt;/strong&gt; 。子查询可以分为如下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内嵌视图：位置位于FROM语句中，也相当于一个预处理结果集的概念&lt;/li&gt;
&lt;li&gt;标量子查询（Scalar Subquery）：只返还一个结果值的子查询。位于SELECT语句的子查询只能返还一个值，所以必然是标量子查询，WHERE语句里也会出现这样的子查询&lt;/li&gt;
&lt;li&gt;关联子查询：将查询的结果传递给子查询作为参数的使用的形式&lt;/li&gt;
&lt;li&gt;一般子查询：除了那些特殊形式的子查询以外的一般用法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;可更新联接视图updatable-join-view-&#34;&gt;可更新联接视图（Updatable Join View ）&lt;/h4&gt;
&lt;p&gt;将一个联接视图（包括视图对象和内嵌视图）放到UPADTE语句中这样的语法形式。&lt;/p&gt;
&lt;p&gt;同样的道理，如果只是用一个表来作为视图的基表，则可以对该视图直接进行&lt;code&gt;DELETE&lt;/code&gt;和&lt;code&gt;UPDATE&lt;/code&gt;，但无法直接执行&lt;code&gt;INSERT&lt;/code&gt;，因为该视图没有默认值的非空列(&lt;code&gt;brand_id&lt;/code&gt;)。该视图称为&lt;strong&gt;可更新视图&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;报错原理&#34;&gt;报错原理&lt;/h3&gt;
&lt;p&gt;Oracle的键值保存表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; *
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FROM&lt;/span&gt; DBA_UPDATABLE_COLUMNS
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;OWNER&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;SCOTT&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE_NAME&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;EMP_DEPT_V&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;OWNER&lt;/span&gt; | &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE_NAME&lt;/span&gt; | &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLUMN_NAME&lt;/span&gt; | UPDATABLE | INSERTABLE | DELETABLE
SCOTT   EMP_DEPT_V     EMPNO            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;
SCOTT   EMP_DEPT_V     ENAME            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;
SCOTT   EMP_DEPT_V     SAL              &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;
SCOTT   EMP_DEPT_V     DEPTNO           &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;
SCOTT   EMP_DEPT_V     DNAME            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;视图&lt;code&gt;EMP_DEPT_V&lt;/code&gt;里的字段都无法变更。&lt;/p&gt;
&lt;p&gt;如果能保证DEPT_T表里的数据是唯一的就能够更新。也就是说在DEPT_T表上加&lt;code&gt;主键约束&lt;/code&gt;或&lt;code&gt;唯一约束&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; DEPT_T
     &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CONSTRAINT&lt;/span&gt; PK_DEPT_T &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;KEY&lt;/span&gt; (DEPTNO);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再看一下之前的视图：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; *
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FROM&lt;/span&gt; DBA_UPDATABLE_COLUMNS
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;OWNER&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;SCOTT&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE_NAME&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;EMP_DEPT_V&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;OWNER&lt;/span&gt; | &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE_NAME&lt;/span&gt; | &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLUMN_NAME&lt;/span&gt; | UPDATABLE | INSERTABLE | DELETABLE
SCOTT   EMP_DEPT_V     EMPNO            YES         YES         YES
SCOTT   EMP_DEPT_V     ENAME            YES         YES         YES
SCOTT   EMP_DEPT_V     SAL              YES         YES         YES
SCOTT   EMP_DEPT_V     DEPTNO           YES         YES         YES
SCOTT   EMP_DEPT_V     DNAME             &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个时候就可以看到，视图中&lt;code&gt;EMP_DEPT_V&lt;/code&gt;表中原来的字段都是可以更新的了。&lt;/p&gt;
&lt;p&gt;在对联接视图进行变更的时候，必须保证修改后的值是唯一的，并且这个事实要让数据库知道，而告知数据库的方法是建立主键约束或唯一约束。&lt;/p&gt;
&lt;p&gt;并不是所有的表都可以随意建这些约束，有什么方法能够不添加约束也能变更？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加&lt;code&gt;/*+ BYPASS_UJVC */&lt;/code&gt; 提示，让ORACLE跳过检查（11g R2之后无效，不建议使用）&lt;/li&gt;
&lt;li&gt;改写&lt;code&gt;UPDATE&lt;/code&gt;语句，通过其他方式判断后处理&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;UPDATE&lt;/code&gt;改成&lt;code&gt;MERGE&lt;/code&gt;语句&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Oracle：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The concept of a &lt;strong&gt;key-preserved table&lt;/strong&gt; is fundamental to understanding the restrictions on &lt;strong&gt;modifying join views&lt;/strong&gt;. A table is key-preserved if every key of the table can also be a key of the result of the join. So, a key-preserved table has its keys preserved through a join.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An &lt;strong&gt;updatable join view&lt;/strong&gt; (also referred to as a &lt;strong&gt;modifiable join view&lt;/strong&gt;) is a view that contains multiple tables in the top-level FROM clause of the SELECT statement, and is not restricted by the WITH READ ONLY clause.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/60a56760b19f&#34;&gt;https://www.jianshu.com/p/60a56760b19f&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.yiibai.com/oracle/oracle-updatable-view.html&#34;&gt;https://www.yiibai.com/oracle/oracle-updatable-view.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://www.openheart.icu/cs/oracle/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Speech</title>
        <link>https://www.openheart.icu/cs/speech/</link>
        <pubDate>Tue, 21 Jul 2020 19:45:28 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/speech/</guid>
        <description>42th openheart https://www.openheart.icu/cs/speech/ -&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;唯一不适应远程工作的是中层管理人员。&lt;/p&gt;
&lt;p&gt;基层员工对于在家工作感到很高兴，只要把活做好就可以了。高层管理人员只需要对销售和产量数字负责。中层管理人员的不适应在于，他们的职责是直接监控基层员工，最常用的判断方法是通过是否坐在座位上等迹象，来判断工作量和工作是否勤奋。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://news.ycombinator.com/item?id=23607203&#34;&gt;Hacker news 读者&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我有一种反英雄主义的精神。以前看电视时，我就对皇帝和将军不感兴趣，觉得他们已经有荣耀和风光了。&lt;/p&gt;
&lt;p&gt;我更关心皇帝和将军手下的那些小兵，有时战斗刚开始，他们就被杀死了。他们脑海里想的是什么？会有人记得他们，为他们哭泣吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; 黄西自传《黄瓜的黄，西瓜的西》&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;时钟和镜子改变了人类社会。&lt;/p&gt;
&lt;p&gt;时钟创造了一种焦虑文化。&lt;/p&gt;
&lt;p&gt;镜子创造了一种自恋文化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; David Perell&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;100年前的中国，四千个人里面才有一个中学生，其他都是文盲。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; 李敖&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;看到抽象的东西，应该尽量使它变得具体；看到具体的东西，应该尽量使它变得抽象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; 李敖&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你花钱买，你就是客户，如果你免费获得，你就是产品。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://www.wired.com/story/a-startup-is-testing-the-subscription-model-for-search-engines/&#34;&gt;《创业公司尝试搜索引擎的订阅模式》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;40年前算法很重要，大部分程序员都需要懂，因为硬件差，必须靠算法保证性能。&lt;/p&gt;
&lt;p&gt;但是今天只剩下不到1%的程序员直接跟算法打交道，其他人都使用现成的软件包，或从大公司购买算法，算法已成为一种商品，普通程序员不再需要自己生产了，也不需要有很深入的了解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;http://shape-of-code.coding-guidelines.com/2020/07/05/algorithms-are-now-commodities/&#34;&gt;《算法现在是商品》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;本站100%无 JavaScript。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://www.swiftbysundell.com/special/javascript-free/&#34;&gt;swiftbysundell.com&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我希望 JavaScript 程序员、Java 程序员、PHP 程序员、Perl 程序员、Python 程序员、C 程序员、C ++ 程序员、以及其他重要语言的程序员，大家聚在一起开个会，一劳永逸地提出一个大家都遵守的解决方案，我们应该如何处理时间和日期。我厌倦了每个语言都有自己一套处理时间和日期的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://news.ycombinator.com/item?id=23781819&#34;&gt;《JavaScript 语言准备提出新的时间和日期 API》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;至少12年 Kubernetes 经验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Required Technical and Professional Expertise&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Minimum 12+ years’ experience in Kubernetes administration and management&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; IBM 招聘云工程师的&lt;a href=&#34;https://intellijobs.ai/job/IBMCloud-Native-Infrastructure-Engineer-Architect-bvJJ6yraexfWOk1nMRKP-bvJJ6yraexfWOk1nMRKP&#34;&gt;公告&lt;/a&gt;，但 Kubernetes 是2014年发布的。&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;一家公司获得垄断地位以后，就不需要从任何形式的产品开发获益了，只通过市场营销或金融工程就能增加利润。最终，公司就会被销售人员和财务人员控制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; 史蒂夫·乔布斯&lt;/p&gt;
&lt;ol start=&#34;12&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;锚定偏差（anchoring bias）指的是决策时严重依赖第一个可用的信息。&lt;/p&gt;
&lt;p&gt;比如，你走进一家体育用品商店，发现的第一件商品，是一条价值500美元的运动裤。接着，你看到另一条价格为300美元的运动裤时，就会觉得它很便宜，实际上如果首先看到这条300美元的裤子，你会觉得它根本不便宜。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://models.substack.com/p/why-are-we-anchored-often&#34;&gt;《锚定偏差》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;13&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;信息成瘾指的是强迫性信息消费：明明已经看完所有内容，你仍在继续滚动浏览 Facebook；你刚刚关闭 Instagram，立即再次打开它；你每五分钟拿起手机，检查有没有新的通知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://www.defetter.com/&#34;&gt;《什么是信息成瘾》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;14&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;谷歌的网页排名算法 PageRank，得名于创始人拉里·佩奇（ Larry Page），实际含义是佩奇的算法（Page&amp;rsquo;s rank）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://notes.rolandcrosby.com/posts/unexpectedly-eponymous/&#34;&gt;《意想不到的来自人名的事物》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;15&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;低本底钢（Low-background steel）指的是1945年第一枚核弹爆炸之前生产的任何钢铁。此后有了核爆，大气中辐射物质增加，影响了所生产的所有钢铁。&lt;/p&gt;
&lt;p&gt;低本底钢目前用于需要最高灵敏度的放射性核检测设备中，主要来源是在第一次核爆发生前建造的船只，它们大多沉没在水底。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://en.wikipedia.org/wiki/Low-background_steel&#34;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;16&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我一直是“强观点，弱立场”（strong opinions, weakly held）。&lt;/p&gt;
&lt;p&gt;不管什么事情，我都会凭直觉得到一个结论，这就是“强观点”；只要有任何与结论相悖的信息，我就会修正自己的观点，这就是“弱立场”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://commoncog.com/blog/strong-opinions-weakly-held-is-bad/&#34;&gt;《强观点，弱立场》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;17&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;几乎所有的企业软件公司，都是销售人员多于工程人员。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://news.ycombinator.com/item?id=23907923&#34;&gt;Hacker News 读者&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;18&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;地球与火星之间的通讯大约需要40分钟，发出一条指令，40分钟以后才能收到，这意味着火星登陆器必须高度自动化，具有自主决策的能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://thediplomat.com/2020/07/why-is-china-going-to-mars/&#34;&gt;《中国为什么想去火星》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;19&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;女：你觉得怎样才是“完美的约会”（the perfect date）？&lt;/p&gt;
&lt;p&gt;男： DD/MM/YYYY，别的日期格式（date format）都容易产生误会。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://twitter.com/rafrasenberg/status/1286968074323865602&#34;&gt;推特&lt;/a&gt;。英语里面，约会和日期是同一个词&lt;code&gt;date&lt;/code&gt;。&lt;/p&gt;
&lt;ol start=&#34;20&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;REST 和 GraphQL 的最大区别是处理缓存的方式。&lt;/p&gt;
&lt;p&gt;当你用 REST 方式构建 API 时，基本上可以自动获得 HTTP 的缓存能力。如果选择 GraphQL，你就需要自己为客户端或应用程序添加缓存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://www.stxnext.com/blog/how-to-build-a-good-api-that-wont-embarrass-you&#34;&gt;《如何构建优秀 API》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;21&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;不要轻易说出自己痛苦，能体会的人很少，看热闹的人很多。&lt;/p&gt;
&lt;p&gt;也不要轻易炫耀，会替你感到高兴的人很少，等着看你最后下场的人很多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; 推特用户&lt;/p&gt;
&lt;ol start=&#34;22&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓完美，不是指不能再添加别的东西了，而是指没有东西可以从其中拿掉了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://www.brainyquote.com/quotes/antoine_de_saintexupery_103610&#34;&gt;安托万·德圣埃克絮佩里&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;23&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;公司刚成立时，需要瑞士军刀型人才。&lt;/p&gt;
&lt;p&gt;公司一旦发展壮大，需要菜刀型人才。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; David Perell&lt;/p&gt;
&lt;ol start=&#34;24&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;硬件总是变得越来越快，但软件总是变得越来越慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://en.wikipedia.org/wiki/Wirth&#39;s_law&#34;&gt;维尔斯定律&lt;/a&gt;（Wirth&amp;rsquo;s law）&lt;/p&gt;
&lt;ol start=&#34;25&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;SSD 固态硬盘变成主流，导致 Windows 10 在 HDD 机械硬盘上几乎无法使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://news.ycombinator.com/item?id=24015218&#34;&gt;Hacker News 读者&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;26&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Web 和浏览器已经发展到令人恐怖的技术规模。微软完全放弃了，Mozilla 在死亡线上挣扎，Safari 根本无足轻重，只剩下 Google 一个玩家。&lt;/p&gt;
&lt;p&gt;我呼吁谷歌立即无限期地中止向 Web 和浏览器添加新 API。浏览器实际上应该开始考虑缩小 API 并削减功能，更关注性能、效率、可靠性和安全性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://drewdevault.com/2020/08/13/Web-browsers-need-to-stop.html&#34;&gt;《Web 需要停下来》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;27&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;无知的一阶效应包括做出错误的决定，二阶效应包括不了解决定为何错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://unintendedconsequenc.es/tiktok-ban-openness-trap/&#34;&gt;unintended consequences&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;28&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;物理学家狄拉克（Dirac）沉默寡言，回答别人时经常只用一个单词。他顽皮的同事们引入了一种新的度量单位，测量人类的语速，就叫做Dirac，每小时只说一个词即为一个 Dirac。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://theconversation.com/the-life-changing-love-of-one-of-the-20th-centurys-greatest-physicists-51229&#34;&gt;《狄拉克的恋爱》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;29&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;制作一加仑糖浆需要50加仑的果汁，表达也是这样，你要把想法以压缩后的形式展示出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://www.perell.com/blog/expression-is-compression&#34;&gt;《表达就是压缩》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;30&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我们公司是一家历史悠久的 IT 公司。人力资源部门的反馈表明，我们很难挽留年轻员工，因为他们不想使用旧系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://news.ycombinator.com/item?id=24230266&#34;&gt;Hacker News 读者&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;31&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;架构师的工作不是做出决策，而是尽可能久地推迟决策，先在不做出重大决策的情况下构建程序，以便以后有足够信息时再做出决策。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://tomgamon.com/posts/2020-08-25-dont-marry-your-design/&#34;&gt;Bob Martin&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;32&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;公钥加密已经发明40多年了，但是我们仍然把魔术数字印在信用卡上，任何看到它们的人都可以未经授权拿走我们所有的钱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://news.ycombinator.com/item?id=24277899&#34;&gt;Hacker News 读者&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;33&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我加入谷歌，是因为需要更多钱；离开谷歌，是因为需要更多时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://theartofmachinery.com/2020/08/04/leaving_google.html&#34;&gt;《离开谷歌的这五年》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;34&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果微软推出容器服务，有些人是不会买的。但是，GitHub 的容器服务，他们就会买。我认为，这就是微软收购 GitHub 的部分原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://news.ycombinator.com/item?id=24346163&#34;&gt;Hacker News 读者&lt;/a&gt;评论 &lt;a href=&#34;https://github.blog/2020-09-01-introducing-github-container-registry/&#34;&gt;GitHub 推出容器仓库服务&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;45&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;贫民窟里的人已经睡眠静了。对面日新里的一排临邓脱路的洋楼里，还有几家点着了红绿的电灯，在那里弹罢拉拉衣加。一声二声清脆的歌音，带着哀调，从静寂的深夜的冷空气里传到我的耳膜上来，这大约是俄国的飘泊的少女，在那里卖钱的歌唱。天上罩满了灰白的薄云，同腐烂的尸体似的沉沉的盖在那里。云层破处也能看得出一点两点星来，但星的近处，黝黝看得出来的天色，好像有无限的哀愁蕴藏着的样子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; 郁达夫《春风沉醉的晚上》&lt;/p&gt;
&lt;ol start=&#34;46&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;军队为什么要实行军衔制度？这是为了部队被打散，临时拼建时，能够迅速确定指挥关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; 维基百科&lt;/p&gt;
&lt;ol start=&#34;47&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;我辞职不是因为收入，也不是因为人际关系，而是因为我觉得自己被困住了，没有增长的空间了。公司的业务离当前行业的技术发展越来越远，让我作为开发人员感到非常痛苦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash;&lt;a href=&#34;https://stitcher.io/blog/dont-get-stuck&#34;&gt;《不要被困住》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;48&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;让一只猴子在打字机上随机按键，当按键时间达到无穷时，几乎必然能够打出任何给定的文字，比如莎士比亚的全部著作。这称为“无限猴子定力”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://en.wikipedia.org/wiki/Infinite_monkey_theorem&#34;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;49&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;苹果公司不允许恶棍在电影中使用 iPhone。因此，如果您正在看一部新电影并且角色拥有 iPhone，那么他们就不是坏人，这算是剧透吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://finance.yahoo.com/news/2020-02-26-rian-johnson-apple-movie-villains-use-iphones-on-came.html&#34;&gt;《苹果和流行文化》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;50&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;2005年，我的毕业论文的《参考书目》部分包含了152个 URL。为了纪念毕业十五周年，我重新检查了这些 URL，其中82个不再起作用。我因此假定，互联网链接的腐烂率是57%。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash;&lt;a href=&#34;https://www.lightbluetouchpaper.org/2020/09/03/a-measurement-of-link-rot-57/&#34;&gt;《测量链接腐烂率》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;51&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;互联网软件行业的开发模式，已经从漫长的开发周期和专门的质量保证（QA）阶段，转移到了快节奏的连续集成/连续交付（CI / CD）管道，这样做极大地提高了迭代速度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://engineering.linkedin.com/blog/2020/production-testing-with-dark-canaries&#34;&gt;《黑暗金丝雀模式的生产模式》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;52&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;你能在下面的一副扑克牌中，快速找到三个方块的那张牌吗？这就是用户面对大型菜单进行导航时的感受。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/74202f12ef5f086091c1ad42a3bbeb860ffc9ed9/68747470733a2f2f7777772e77616e67626173652e636f6d2f626c6f67696d672f61737365742f3230323030392f6267323032303039313430312e6a7067&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://uxmovement.com/navigation/solving-the-megaton-problem-with-mega-menus/&#34;&gt;《大菜单导航的解决方案》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;53&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;三年前，我们搬到伦敦教书，一直租房住，现在可以买房了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://www.imperial.ac.uk/news/203853/imperial-mathematician-scoops-3m-breakthrough-prize/&#34;&gt;英国马丁·海尔教授&lt;/a&gt;（Martin Hairer）的获奖感言。他获得了今年的数学突破奖，奖金为300万美元，这是目前奖金最高的科学奖项。&lt;/p&gt;
&lt;ol start=&#34;54&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;It is not dead,it is indeed done.(它还没有死，但确实已经写完了)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://momentjs.com/docs/#/-project-status/&#34;&gt;Moment.js&lt;/a&gt; 宣布停止开发，进入维护状态。&lt;/p&gt;
&lt;ol start=&#34;55&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;技术的快速进步，尽管带来了不可预测的后果，但是它让人类站到了更高的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash;&lt;a href=&#34;https://hawaiigentech.com/post/commentary/frogs-wont-let-themselves-be-cooked/&#34;&gt;《时代变化中的技术隐喻》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;56&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;你会在20个方向上走一步，还是在一个方向上走20步？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; 匿名&lt;/p&gt;
&lt;ol start=&#34;57&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;GPT-3 模型就像一个聪明的学生，他没有读完书，试图胡说八道，将一些众所周知的事实、一些真相、一些直率的谎言，编织在一种流畅的叙述中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://syncedreview.com/2020/09%E4%BC%8A%E4%B8%87%E5%B8%95/09/new-multitask-benchmark-suggests-even-the-best-language-models-dont-have-a-clue-what-theyre-doing/&#34;&gt;一个教授&lt;/a&gt;评论 GPT-3 模型可以自动生成人类可读的文本&lt;/p&gt;
&lt;ol start=&#34;58&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;网站需要3种技术，但是由于用到各种工具和框架，最终使我接触了约20种不同的技术，有时还不得不研究第 n 级依赖项的源代码。&lt;/p&gt;
&lt;p&gt;这就是我不喜欢现代 Web 开发的地方，你想使用三个工具，但是必须知道如何使用二十个工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash; &lt;a href=&#34;https://css-tricks.com/weaved-webs/&#34;&gt;《编织在一起的 Web》&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;59&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Conway&amp;rsquo;s law&lt;/strong&gt;：设计系统的架构受制于产生这些设计的组织的沟通结构。&amp;ndash;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%A9%AC%E5%B0%94%E6%96%87%C2%B7%E5%BA%B7%E5%A8%81&#34;&gt;马尔文·康威&lt;/a&gt;1967&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization&amp;rsquo;s communication structure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash;  Melvin E. Conway&lt;/p&gt;
- https://www.openheart.icu/cs/speech/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>剑指 Offer 46. 把数字翻译成字符串</title>
        <link>https://www.openheart.icu/arithmetic/%E5%89%91%E6%8C%87-offer-46.-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2-lcof/</link>
        <pubDate>Tue, 21 Jul 2020 19:28:00 +0000</pubDate>
        
        <guid>https://www.openheart.icu/arithmetic/%E5%89%91%E6%8C%87-offer-46.-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2-lcof/</guid>
        <description>42th openheart https://www.openheart.icu/arithmetic/%E5%89%91%E6%8C%87-offer-46.-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2-lcof/ -&lt;h1 id=&#34;把数字翻译成字符串httpsleetcode-cncomproblemsba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof&#34;&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/&#34;&gt;把数字翻译成字符串&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是&lt;code&gt;bccfi&lt;/code&gt;, &lt;code&gt;bwfi&lt;/code&gt;, &lt;code&gt;bczi&lt;/code&gt;, &lt;code&gt;mcfi&lt;/code&gt;和&lt;code&gt;mzi&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0 &amp;lt;= num &amp;lt; 2&lt;!-- raw HTML omitted --&gt;31&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;动态规划&#34;&gt;动态规划&lt;/h2&gt;
&lt;p&gt;拿示例看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先考虑每个数字单独翻译的情况，即翻译&lt;code&gt;[1,2,2,4,8]&lt;/code&gt;，结果为&lt;code&gt;bccfi&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以将数字拼接为两位的情况，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[12,2,4,8]&lt;/code&gt; &lt;code&gt;mcfi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[12,24,8]&lt;/code&gt; &lt;code&gt;mzi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[12,2,48]&lt;/code&gt; 48&amp;gt;25&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1,22,48]&lt;/code&gt; 48&amp;gt;25&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1,22,4,8]&lt;/code&gt; &lt;code&gt;bwfi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1,2,24,8]&lt;/code&gt; &lt;code&gt;bczi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[1,2,2,48]&lt;/code&gt; 48&amp;gt;25&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;归纳规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以单独作为一位来翻译&lt;/li&gt;
&lt;li&gt;如果第 &lt;code&gt;i−1&lt;/code&gt; 位和第 &lt;code&gt;i&lt;/code&gt; 位组成的数字在 10 到 25 之间，可以把这两位连起来翻译&lt;/li&gt;
&lt;/ul&gt;
- https://www.openheart.icu/arithmetic/%E5%89%91%E6%8C%87-offer-46.-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2-lcof/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>DNS</title>
        <link>https://www.openheart.icu/cs/dns/</link>
        <pubDate>Sun, 19 Jul 2020 12:50:56 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/dns/</guid>
        <description>42th openheart https://www.openheart.icu/cs/dns/ -&lt;h2 id=&#34;dnspod-dns&#34;&gt;DNSPod DNS+&lt;/h2&gt;
&lt;p&gt;​            首选：119.29.29.29&lt;/p&gt;
&lt;p&gt;​            备选：182.254.116.116&lt;/p&gt;
&lt;h3 id=&#34;114dns&#34;&gt;114DNS&lt;/h3&gt;
&lt;p&gt;​            首选：114.114.114.114&lt;/p&gt;
&lt;p&gt;​            备选：114.114.114.115&lt;/p&gt;
&lt;h3 id=&#34;阿里-alidns&#34;&gt;阿里 AliDNS&lt;/h3&gt;
&lt;p&gt;​            首选：223.5.5.5&lt;/p&gt;
&lt;p&gt;​            备选：223.6.6.6&lt;/p&gt;
&lt;h3 id=&#34;dns派&#34;&gt;DNS派&lt;/h3&gt;
&lt;p&gt;​            首选（电信/移动/铁通）：101.226.4.6&lt;/p&gt;
&lt;p&gt;​            备选（电信/移动/铁通）：218.30.118.6&lt;/p&gt;
&lt;p&gt;​            首选（联通）：123.125.81.6&lt;/p&gt;
&lt;p&gt;​            备选（联通）：140.207.198.6&lt;/p&gt;
&lt;h3 id=&#34;百度-baidudns&#34;&gt;百度 BaiduDNS&lt;/h3&gt;
&lt;p&gt;​            首选：180.76.76.76&lt;/p&gt;
&lt;h3 id=&#34;cnnic-sdns&#34;&gt;CNNIC SDNS&lt;/h3&gt;
&lt;p&gt;​            首选：1.2.4.8&lt;/p&gt;
&lt;p&gt;​            备选：202.98.0.68&lt;/p&gt;
&lt;h3 id=&#34;opendns&#34;&gt;OpenDNS&lt;/h3&gt;
&lt;p&gt;​            208.67.222.222&lt;/p&gt;
&lt;p&gt;​            208.67.220.220&lt;/p&gt;
&lt;p&gt;​            208.67.222.220&lt;/p&gt;
&lt;p&gt;​            208.67.220.222&lt;/p&gt;
&lt;h3 id=&#34;family-shield-servers&#34;&gt;Family Shield Servers&lt;/h3&gt;
&lt;p&gt;可以阻挡成人网站和含有恶意网站&lt;/p&gt;
&lt;p&gt;​            208.67.222.123&lt;/p&gt;
&lt;p&gt;​            208.67.220.123&lt;/p&gt;
&lt;h3 id=&#34;ipv6地址实验&#34;&gt;IPv6地址(实验)&lt;/h3&gt;
&lt;p&gt;​            2620:0:ccc::2&lt;/p&gt;
&lt;p&gt;​            2620:0:ccd::2&lt;/p&gt;
- https://www.openheart.icu/cs/dns/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
  </channel>
</rss> 