<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arithmetic on 42th openheart</title>
    <link>https://www.openheart.icu/tags/arithmetic/</link>
    <description>Recent content in Arithmetic on 42th openheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ALL RIGHTS RESERVED KRIS NIE</copyright>
    <lastBuildDate>Wed, 15 Jul 2020 23:28:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.openheart.icu/tags/arithmetic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>206. Reverse Linked List</title>
      <link>https://www.openheart.icu/arithmetic/206.-reverse-linked-list/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/arithmetic/206.-reverse-linked-list/</guid>
      <description>Reverse a singly linked list. Example:
 Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL
 Follow up:
A linked list can be reversed either iteratively or recursively. Could you implement both?
 迭代 将
 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
 转化为
 NULL&amp;lt;-1&amp;lt;-2&amp;lt;-3&amp;lt;-4&amp;lt;-5
 使用一个prev节点存储上一个节点（初始为NULL），将当前curr节点的next指向prev节点，prev节点存储curr节点，curr存储curr的原next节点，完成一次迭代。最后返回prev（最后的curr是原ListNode的NULL）
/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ public ListNode reverseList(ListNode head) { ListNode prev = null; ListNode curr = head; while (curr !</description>
    </item>
    
  </channel>
</rss>